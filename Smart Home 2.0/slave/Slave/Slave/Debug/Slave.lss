
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00001f74  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800176  00800176  0000211e  2**0
                  ALLOC
  3 .stab         000018e4  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000582  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00003f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000391d  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6d  00000000  00000000  00007ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146b  00000000  00000000  00008a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a0  00000000  00000000  00009ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000836  00000000  00000000  0000a860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001986  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000ca1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <main>
      8a:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vint>:

	void ADC_vint()
{
	
		/*enable ADC*/
		SET_BIT(ADCSRA,ADEN);
      92:	37 9a       	sbi	0x06, 7	; 6
	
		/* choose Vref*/
		SET_BIT(ADMUX,REFS0);
      94:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
      96:	3f 98       	cbi	0x07, 7	; 7
	
		/* chose clock*/
		SET_BIT(ADCSRA,ADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
		SET_BIT(ADCSRA,ADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS0);
      9c:	30 9a       	sbi	0x06, 0	; 6
	
		/*global interrupt */
		sei();
      9e:	78 94       	sei
		/*set interrupt*/
		SET_BIT(ADCSRA,ADIE);
      a0:	33 9a       	sbi	0x06, 3	; 6
	
}
      a2:	08 95       	ret

000000a4 <ADC_u16Read>:
	unsigned short ADC_u16Read()
{
	
		short reading=0;
		/* request new conversion*/
		SET_BIT(ADCSRA,ADSC);
      a4:	36 9a       	sbi	0x06, 6	; 6
	
		/*wait for ADIF table*/
		while(READ_BIT_SET(ADCSRA,ADIF)==0)
      a6:	34 9b       	sbis	0x06, 4	; 6
      a8:	fe cf       	rjmp	.-4      	; 0xa6 <ADC_u16Read+0x2>
		{
			//wait
		}
				
		/* read bits*/
		reading |=ADCL;
      aa:	84 b1       	in	r24, 0x04	; 4
		reading |=(short)(ADCH<<8);
      ac:	95 b1       	in	r25, 0x05	; 5
      ae:	39 2f       	mov	r19, r25
      b0:	20 e0       	ldi	r18, 0x00	; 0
		{
			//wait
		}
				
		/* read bits*/
		reading |=ADCL;
      b2:	90 e0       	ldi	r25, 0x00	; 0
		reading |=(short)(ADCH<<8);
      b4:	82 2b       	or	r24, r18
      b6:	93 2b       	or	r25, r19
		
		return reading;
	
}
      b8:	08 95       	ret

000000ba <ADC_vStartconvin>:


	void ADC_vStartconvin()
{
		/* request new conversion*/
		SET_BIT(ADCSRA,ADSC);
      ba:	36 9a       	sbi	0x06, 6	; 6
}
      bc:	08 95       	ret

000000be <ADC_u16Read_intr>:
	unsigned short ADC_u16Read_intr()
{
		short reading=0;
		
		/* read bits*/
		reading |=ADCL;
      be:	84 b1       	in	r24, 0x04	; 4
		reading |=(short)(ADCH<<8);
      c0:	95 b1       	in	r25, 0x05	; 5
      c2:	39 2f       	mov	r19, r25
      c4:	20 e0       	ldi	r18, 0x00	; 0
	unsigned short ADC_u16Read_intr()
{
		short reading=0;
		
		/* read bits*/
		reading |=ADCL;
      c6:	90 e0       	ldi	r25, 0x00	; 0
		reading |=(short)(ADCH<<8);
      c8:	82 2b       	or	r24, r18
      ca:	93 2b       	or	r25, r19
	
		return reading;
      cc:	08 95       	ret

000000ce <DIO_vsetpindirection>:
// #include "DIO.h"
 #include "COMMON_CONFIG.h"
 
	void DIO_vsetpindirection(char portname ,char pinnum,char dir)
{
		 switch (portname)
      ce:	84 34       	cpi	r24, 0x44	; 68
      d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_vsetpindirection+0x6>
      d2:	71 c0       	rjmp	.+226    	; 0x1b6 <DIO_vsetpindirection+0xe8>
      d4:	85 34       	cpi	r24, 0x45	; 69
      d6:	48 f4       	brcc	.+18     	; 0xea <DIO_vsetpindirection+0x1c>
      d8:	82 34       	cpi	r24, 0x42	; 66
      da:	99 f1       	breq	.+102    	; 0x142 <DIO_vsetpindirection+0x74>
      dc:	83 34       	cpi	r24, 0x43	; 67
      de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_vsetpindirection+0x14>
      e0:	4d c0       	rjmp	.+154    	; 0x17c <DIO_vsetpindirection+0xae>
      e2:	81 34       	cpi	r24, 0x41	; 65
      e4:	09 f0       	breq	.+2      	; 0xe8 <DIO_vsetpindirection+0x1a>
      e6:	83 c0       	rjmp	.+262    	; 0x1ee <DIO_vsetpindirection+0x120>
      e8:	0f c0       	rjmp	.+30     	; 0x108 <DIO_vsetpindirection+0x3a>
      ea:	82 36       	cpi	r24, 0x62	; 98
      ec:	51 f1       	breq	.+84     	; 0x142 <DIO_vsetpindirection+0x74>
      ee:	83 36       	cpi	r24, 0x63	; 99
      f0:	20 f4       	brcc	.+8      	; 0xfa <DIO_vsetpindirection+0x2c>
      f2:	81 36       	cpi	r24, 0x61	; 97
      f4:	09 f0       	breq	.+2      	; 0xf8 <DIO_vsetpindirection+0x2a>
      f6:	7b c0       	rjmp	.+246    	; 0x1ee <DIO_vsetpindirection+0x120>
      f8:	07 c0       	rjmp	.+14     	; 0x108 <DIO_vsetpindirection+0x3a>
      fa:	83 36       	cpi	r24, 0x63	; 99
      fc:	09 f4       	brne	.+2      	; 0x100 <DIO_vsetpindirection+0x32>
      fe:	3e c0       	rjmp	.+124    	; 0x17c <DIO_vsetpindirection+0xae>
     100:	84 36       	cpi	r24, 0x64	; 100
     102:	09 f0       	breq	.+2      	; 0x106 <DIO_vsetpindirection+0x38>
     104:	74 c0       	rjmp	.+232    	; 0x1ee <DIO_vsetpindirection+0x120>
     106:	57 c0       	rjmp	.+174    	; 0x1b6 <DIO_vsetpindirection+0xe8>
		 {
			 case 'A':
			 case 'a':
			 
					if (dir==1)
     108:	41 30       	cpi	r20, 0x01	; 1
     10a:	69 f4       	brne	.+26     	; 0x126 <DIO_vsetpindirection+0x58>
					{
						SET_BIT(DDRA,pinnum);
     10c:	2a b3       	in	r18, 0x1a	; 26
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	ac 01       	movw	r20, r24
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_vsetpindirection+0x4c>
     116:	44 0f       	add	r20, r20
     118:	55 1f       	adc	r21, r21
     11a:	6a 95       	dec	r22
     11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_vsetpindirection+0x48>
     11e:	ba 01       	movw	r22, r20
     120:	62 2b       	or	r22, r18
     122:	6a bb       	out	0x1a, r22	; 26
     124:	08 95       	ret
						// DDRA |= (1<<pinnum);
					}
					
					else
					{
						CLR_BIT(DDRA,pinnum);
     126:	2a b3       	in	r18, 0x1a	; 26
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	ac 01       	movw	r20, r24
     12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetpindirection+0x66>
     130:	44 0f       	add	r20, r20
     132:	55 1f       	adc	r21, r21
     134:	6a 95       	dec	r22
     136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetpindirection+0x62>
     138:	ba 01       	movw	r22, r20
     13a:	60 95       	com	r22
     13c:	62 23       	and	r22, r18
     13e:	6a bb       	out	0x1a, r22	; 26
     140:	08 95       	ret
					break;
			
			case 'B':
			case 'b':
			
					if (dir==1)
     142:	41 30       	cpi	r20, 0x01	; 1
     144:	69 f4       	brne	.+26     	; 0x160 <DIO_vsetpindirection+0x92>
					{
						SET_BIT(DDRB,pinnum);	
     146:	27 b3       	in	r18, 0x17	; 23
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	ac 01       	movw	r20, r24
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_vsetpindirection+0x86>
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_vsetpindirection+0x82>
     158:	ba 01       	movw	r22, r20
     15a:	62 2b       	or	r22, r18
     15c:	67 bb       	out	0x17, r22	; 23
     15e:	08 95       	ret
						//DDRB |= (1<<pinnum);
					}
					
					else
					{
						 CLR_BIT(DDRB,pinnum);
     160:	27 b3       	in	r18, 0x17	; 23
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	ac 01       	movw	r20, r24
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_vsetpindirection+0xa0>
     16a:	44 0f       	add	r20, r20
     16c:	55 1f       	adc	r21, r21
     16e:	6a 95       	dec	r22
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_vsetpindirection+0x9c>
     172:	ba 01       	movw	r22, r20
     174:	60 95       	com	r22
     176:	62 23       	and	r22, r18
     178:	67 bb       	out	0x17, r22	; 23
     17a:	08 95       	ret
					break;
					
		 	case 'C':
			case 'c':
			
					if (dir==1)
     17c:	41 30       	cpi	r20, 0x01	; 1
     17e:	69 f4       	brne	.+26     	; 0x19a <DIO_vsetpindirection+0xcc>
					{
						SET_BIT(DDRC,pinnum);
     180:	24 b3       	in	r18, 0x14	; 20
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	ac 01       	movw	r20, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vsetpindirection+0xc0>
     18a:	44 0f       	add	r20, r20
     18c:	55 1f       	adc	r21, r21
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vsetpindirection+0xbc>
     192:	ba 01       	movw	r22, r20
     194:	62 2b       	or	r22, r18
     196:	64 bb       	out	0x14, r22	; 20
     198:	08 95       	ret
						//DDRC |= (1<<pinnum);
					}
			
					else
					{
						CLR_BIT(DDRC,pinnum);
     19a:	24 b3       	in	r18, 0x14	; 20
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	ac 01       	movw	r20, r24
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_vsetpindirection+0xda>
     1a4:	44 0f       	add	r20, r20
     1a6:	55 1f       	adc	r21, r21
     1a8:	6a 95       	dec	r22
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_vsetpindirection+0xd6>
     1ac:	ba 01       	movw	r22, r20
     1ae:	60 95       	com	r22
     1b0:	62 23       	and	r22, r18
     1b2:	64 bb       	out	0x14, r22	; 20
     1b4:	08 95       	ret
					break;	
					 
			case 'D':
			case 'd':
			
					if (dir==1)
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_vsetpindirection+0x106>
					{
						SET_BIT(DDRD,pinnum);
     1ba:	21 b3       	in	r18, 0x11	; 17
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_vsetpindirection+0xfa>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_vsetpindirection+0xf6>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	61 bb       	out	0x11, r22	; 17
     1d2:	08 95       	ret
						//DDRD |= (1<<pinnum);
					}
			
					else
					{
						CLR_BIT(DDRD,pinnum);
     1d4:	21 b3       	in	r18, 0x11	; 17
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_vsetpindirection+0x114>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_vsetpindirection+0x110>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	61 bb       	out	0x11, r22	; 17
     1ee:	08 95       	ret

000001f0 <DIO_vWrite>:
		}			 
} 
		
	void DIO_vWrite(char portname ,char pinnum,char res)
{
		switch (portname)
     1f0:	84 34       	cpi	r24, 0x44	; 68
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <DIO_vWrite+0x6>
     1f4:	71 c0       	rjmp	.+226    	; 0x2d8 <DIO_vWrite+0xe8>
     1f6:	85 34       	cpi	r24, 0x45	; 69
     1f8:	48 f4       	brcc	.+18     	; 0x20c <DIO_vWrite+0x1c>
     1fa:	82 34       	cpi	r24, 0x42	; 66
     1fc:	99 f1       	breq	.+102    	; 0x264 <DIO_vWrite+0x74>
     1fe:	83 34       	cpi	r24, 0x43	; 67
     200:	08 f0       	brcs	.+2      	; 0x204 <DIO_vWrite+0x14>
     202:	4d c0       	rjmp	.+154    	; 0x29e <DIO_vWrite+0xae>
     204:	81 34       	cpi	r24, 0x41	; 65
     206:	09 f0       	breq	.+2      	; 0x20a <DIO_vWrite+0x1a>
     208:	83 c0       	rjmp	.+262    	; 0x310 <DIO_vWrite+0x120>
     20a:	0f c0       	rjmp	.+30     	; 0x22a <DIO_vWrite+0x3a>
     20c:	82 36       	cpi	r24, 0x62	; 98
     20e:	51 f1       	breq	.+84     	; 0x264 <DIO_vWrite+0x74>
     210:	83 36       	cpi	r24, 0x63	; 99
     212:	20 f4       	brcc	.+8      	; 0x21c <DIO_vWrite+0x2c>
     214:	81 36       	cpi	r24, 0x61	; 97
     216:	09 f0       	breq	.+2      	; 0x21a <DIO_vWrite+0x2a>
     218:	7b c0       	rjmp	.+246    	; 0x310 <DIO_vWrite+0x120>
     21a:	07 c0       	rjmp	.+14     	; 0x22a <DIO_vWrite+0x3a>
     21c:	83 36       	cpi	r24, 0x63	; 99
     21e:	09 f4       	brne	.+2      	; 0x222 <DIO_vWrite+0x32>
     220:	3e c0       	rjmp	.+124    	; 0x29e <DIO_vWrite+0xae>
     222:	84 36       	cpi	r24, 0x64	; 100
     224:	09 f0       	breq	.+2      	; 0x228 <DIO_vWrite+0x38>
     226:	74 c0       	rjmp	.+232    	; 0x310 <DIO_vWrite+0x120>
     228:	57 c0       	rjmp	.+174    	; 0x2d8 <DIO_vWrite+0xe8>
	{
			case 'A':
			case 'a': 
				if (res==1)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <DIO_vWrite+0x58>
			{
				SET_BIT(PORTA,pinnum);
     22e:	2b b3       	in	r18, 0x1b	; 27
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_vWrite+0x4c>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_vWrite+0x48>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	6b bb       	out	0x1b, r22	; 27
     246:	08 95       	ret
				//PORTA |= (1<<pinnum);
			}
				
			else
			{
				CLR_BIT(PORTA,pinnum);
     248:	2b b3       	in	r18, 0x1b	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_vWrite+0x66>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_vWrite+0x62>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	6b bb       	out	0x1b, r22	; 27
     262:	08 95       	ret
			}
			break;
			
		case 'B':
		case 'b':
			if (res==1)
     264:	41 30       	cpi	r20, 0x01	; 1
     266:	69 f4       	brne	.+26     	; 0x282 <DIO_vWrite+0x92>
			{
				SET_BIT(PORTB,pinnum);
     268:	28 b3       	in	r18, 0x18	; 24
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vWrite+0x86>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vWrite+0x82>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	68 bb       	out	0x18, r22	; 24
     280:	08 95       	ret
				//PORTB |= (1<<pinnum);
			}
			
			else
			{
				CLR_BIT(PORTB,pinnum);
     282:	28 b3       	in	r18, 0x18	; 24
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_vWrite+0xa0>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_vWrite+0x9c>
     294:	ba 01       	movw	r22, r20
     296:	60 95       	com	r22
     298:	62 23       	and	r22, r18
     29a:	68 bb       	out	0x18, r22	; 24
     29c:	08 95       	ret
			}
			break;
		
		case 'C':
		case 'c':
			if (res==1)
     29e:	41 30       	cpi	r20, 0x01	; 1
     2a0:	69 f4       	brne	.+26     	; 0x2bc <DIO_vWrite+0xcc>
			{
				SET_BIT(PORTC,pinnum);
     2a2:	25 b3       	in	r18, 0x15	; 21
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	ac 01       	movw	r20, r24
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vWrite+0xc0>
     2ac:	44 0f       	add	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vWrite+0xbc>
     2b4:	ba 01       	movw	r22, r20
     2b6:	62 2b       	or	r22, r18
     2b8:	65 bb       	out	0x15, r22	; 21
     2ba:	08 95       	ret
				//PORTC |= (1<<pinnum);
			}
		
			else
			{
				CLR_BIT(PORTC,pinnum);
     2bc:	25 b3       	in	r18, 0x15	; 21
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ac 01       	movw	r20, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_vWrite+0xda>
     2c6:	44 0f       	add	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_vWrite+0xd6>
     2ce:	ba 01       	movw	r22, r20
     2d0:	60 95       	com	r22
     2d2:	62 23       	and	r22, r18
     2d4:	65 bb       	out	0x15, r22	; 21
     2d6:	08 95       	ret
			}
			break;
			
		case 'D':
		case 'd':
			if (res==1)
     2d8:	41 30       	cpi	r20, 0x01	; 1
     2da:	69 f4       	brne	.+26     	; 0x2f6 <DIO_vWrite+0x106>
			{
				SET_BIT(PORTD,pinnum);
     2dc:	22 b3       	in	r18, 0x12	; 18
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	ac 01       	movw	r20, r24
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_vWrite+0xfa>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_vWrite+0xf6>
     2ee:	ba 01       	movw	r22, r20
     2f0:	62 2b       	or	r22, r18
     2f2:	62 bb       	out	0x12, r22	; 18
     2f4:	08 95       	ret
				//PORTD |= (1<<pinnum);
			}
	
			else
			{
				CLR_BIT(PORTD,pinnum);
     2f6:	22 b3       	in	r18, 0x12	; 18
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	ac 01       	movw	r20, r24
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vWrite+0x114>
     300:	44 0f       	add	r20, r20
     302:	55 1f       	adc	r21, r21
     304:	6a 95       	dec	r22
     306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vWrite+0x110>
     308:	ba 01       	movw	r22, r20
     30a:	60 95       	com	r22
     30c:	62 23       	and	r22, r18
     30e:	62 bb       	out	0x12, r22	; 18
     310:	08 95       	ret

00000312 <DIO_vToggle>:
}		
		
		
void DIO_vToggle(char portname ,char pinnum)
{
		switch(portname)
     312:	84 34       	cpi	r24, 0x44	; 68
     314:	09 f4       	brne	.+2      	; 0x318 <DIO_vToggle+0x6>
     316:	3d c0       	rjmp	.+122    	; 0x392 <DIO_vToggle+0x80>
     318:	85 34       	cpi	r24, 0x45	; 69
     31a:	40 f4       	brcc	.+16     	; 0x32c <DIO_vToggle+0x1a>
     31c:	82 34       	cpi	r24, 0x42	; 66
     31e:	f9 f0       	breq	.+62     	; 0x35e <DIO_vToggle+0x4c>
     320:	83 34       	cpi	r24, 0x43	; 67
     322:	50 f5       	brcc	.+84     	; 0x378 <DIO_vToggle+0x66>
     324:	81 34       	cpi	r24, 0x41	; 65
     326:	09 f0       	breq	.+2      	; 0x32a <DIO_vToggle+0x18>
     328:	40 c0       	rjmp	.+128    	; 0x3aa <DIO_vToggle+0x98>
     32a:	0c c0       	rjmp	.+24     	; 0x344 <DIO_vToggle+0x32>
     32c:	82 36       	cpi	r24, 0x62	; 98
     32e:	b9 f0       	breq	.+46     	; 0x35e <DIO_vToggle+0x4c>
     330:	83 36       	cpi	r24, 0x63	; 99
     332:	18 f4       	brcc	.+6      	; 0x33a <DIO_vToggle+0x28>
     334:	81 36       	cpi	r24, 0x61	; 97
     336:	c9 f5       	brne	.+114    	; 0x3aa <DIO_vToggle+0x98>
     338:	05 c0       	rjmp	.+10     	; 0x344 <DIO_vToggle+0x32>
     33a:	83 36       	cpi	r24, 0x63	; 99
     33c:	e9 f0       	breq	.+58     	; 0x378 <DIO_vToggle+0x66>
     33e:	84 36       	cpi	r24, 0x64	; 100
     340:	a1 f5       	brne	.+104    	; 0x3aa <DIO_vToggle+0x98>
     342:	27 c0       	rjmp	.+78     	; 0x392 <DIO_vToggle+0x80>
	{
		
		case'A':
		case'a':
		
			TOG_BIT(PORTA,pinnum);
     344:	2b b3       	in	r18, 0x1b	; 27
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	ac 01       	movw	r20, r24
     34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_vToggle+0x40>
     34e:	44 0f       	add	r20, r20
     350:	55 1f       	adc	r21, r21
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_vToggle+0x3c>
     356:	ba 01       	movw	r22, r20
     358:	62 27       	eor	r22, r18
     35a:	6b bb       	out	0x1b, r22	; 27
			//PORTA ^=(1<<pinnum);
			break;
     35c:	08 95       	ret
		
		case'B':
		case'b':
		
			TOG_BIT(PORTB,pinnum);
     35e:	28 b3       	in	r18, 0x18	; 24
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	ac 01       	movw	r20, r24
     366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vToggle+0x5a>
     368:	44 0f       	add	r20, r20
     36a:	55 1f       	adc	r21, r21
     36c:	6a 95       	dec	r22
     36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_vToggle+0x56>
     370:	ba 01       	movw	r22, r20
     372:	62 27       	eor	r22, r18
     374:	68 bb       	out	0x18, r22	; 24
			//PORTB ^=(1<<pinnum);
			break;
     376:	08 95       	ret
		
		case'C':
		case'c':
		
			TOG_BIT(PORTC,pinnum);
     378:	25 b3       	in	r18, 0x15	; 21
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ac 01       	movw	r20, r24
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_vToggle+0x74>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_vToggle+0x70>
     38a:	ba 01       	movw	r22, r20
     38c:	62 27       	eor	r22, r18
     38e:	65 bb       	out	0x15, r22	; 21
			//PORTC ^=(1<<pinnum);
			break;
     390:	08 95       	ret
		
		case'D':
		case'd':
		
			TOG_BIT(PORTD,pinnum);
     392:	22 b3       	in	r18, 0x12	; 18
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	ac 01       	movw	r20, r24
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_vToggle+0x8e>
     39c:	44 0f       	add	r20, r20
     39e:	55 1f       	adc	r21, r21
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_vToggle+0x8a>
     3a4:	ba 01       	movw	r22, r20
     3a6:	62 27       	eor	r22, r18
     3a8:	62 bb       	out	0x12, r22	; 18
     3aa:	08 95       	ret

000003ac <DIO_vRead>:
			 		 
	char DIO_vRead (char portname ,char pinnum)
{
	char x=0;
	
		switch(portname)
     3ac:	84 34       	cpi	r24, 0x44	; 68
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <DIO_vRead+0x6>
     3b0:	4e c0       	rjmp	.+156    	; 0x44e <DIO_vRead+0xa2>
     3b2:	85 34       	cpi	r24, 0x45	; 69
     3b4:	40 f4       	brcc	.+16     	; 0x3c6 <DIO_vRead+0x1a>
     3b6:	82 34       	cpi	r24, 0x42	; 66
     3b8:	31 f1       	breq	.+76     	; 0x406 <DIO_vRead+0x5a>
     3ba:	83 34       	cpi	r24, 0x43	; 67
     3bc:	b0 f5       	brcc	.+108    	; 0x42a <DIO_vRead+0x7e>
     3be:	81 34       	cpi	r24, 0x41	; 65
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <DIO_vRead+0x18>
     3c2:	57 c0       	rjmp	.+174    	; 0x472 <DIO_vRead+0xc6>
     3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <DIO_vRead+0x36>
     3c6:	82 36       	cpi	r24, 0x62	; 98
     3c8:	f1 f0       	breq	.+60     	; 0x406 <DIO_vRead+0x5a>
     3ca:	83 36       	cpi	r24, 0x63	; 99
     3cc:	20 f4       	brcc	.+8      	; 0x3d6 <DIO_vRead+0x2a>
     3ce:	81 36       	cpi	r24, 0x61	; 97
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <DIO_vRead+0x28>
     3d2:	4f c0       	rjmp	.+158    	; 0x472 <DIO_vRead+0xc6>
     3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <DIO_vRead+0x36>
     3d6:	83 36       	cpi	r24, 0x63	; 99
     3d8:	41 f1       	breq	.+80     	; 0x42a <DIO_vRead+0x7e>
     3da:	84 36       	cpi	r24, 0x64	; 100
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <DIO_vRead+0x34>
     3de:	49 c0       	rjmp	.+146    	; 0x472 <DIO_vRead+0xc6>
     3e0:	36 c0       	rjmp	.+108    	; 0x44e <DIO_vRead+0xa2>
		{
			case'A':
			case'a':
			
				x= READ_BIT_SET(PINA,pinnum);
     3e2:	29 b3       	in	r18, 0x19	; 25
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	06 2e       	mov	r0, r22
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vRead+0x44>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vRead+0x40>
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	82 23       	and	r24, r18
     3f8:	93 23       	and	r25, r19
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_vRead+0x54>
     3fc:	95 95       	asr	r25
     3fe:	87 95       	ror	r24
     400:	6a 95       	dec	r22
     402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_vRead+0x50>
				//x=(((PINA&(1<<(pinnum)))>>(pinnum)));
				break;
     404:	08 95       	ret
		
			case'B':
			case'b':
				
				x= READ_BIT_SET(PINB,pinnum);
     406:	26 b3       	in	r18, 0x16	; 22
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	06 2e       	mov	r0, r22
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_vRead+0x68>
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	0a 94       	dec	r0
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_vRead+0x64>
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	82 23       	and	r24, r18
     41c:	93 23       	and	r25, r19
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_vRead+0x78>
     420:	95 95       	asr	r25
     422:	87 95       	ror	r24
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_vRead+0x74>
				//x=(((PINB&(1<<(pinnum)))>>(pinnum)));
				break;
     428:	08 95       	ret
		
			case'C':
			case'c':
				
				x= READ_BIT_SET(PINC,pinnum);
     42a:	23 b3       	in	r18, 0x13	; 19
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	06 2e       	mov	r0, r22
     432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_vRead+0x8c>
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	0a 94       	dec	r0
     43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_vRead+0x88>
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	82 23       	and	r24, r18
     440:	93 23       	and	r25, r19
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_vRead+0x9c>
     444:	95 95       	asr	r25
     446:	87 95       	ror	r24
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_vRead+0x98>
				//x=(((PINC&(1<<(pinnum)))>>(pinnum)));
				break;
     44c:	08 95       	ret
		
			case'D':
			case'd':
				
				x= READ_BIT_SET(PIND,pinnum);
     44e:	20 b3       	in	r18, 0x10	; 16
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	06 2e       	mov	r0, r22
     456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_vRead+0xb0>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_vRead+0xac>
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	82 23       	and	r24, r18
     464:	93 23       	and	r25, r19
     466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_vRead+0xc0>
     468:	95 95       	asr	r25
     46a:	87 95       	ror	r24
     46c:	6a 95       	dec	r22
     46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_vRead+0xbc>
				//x=(((PIND&(1<<(pinnum)))>>(pinnum)));
				break;
     470:	08 95       	ret
	}		
}		
			 		 
	char DIO_vRead (char portname ,char pinnum)
{
	char x=0;
     472:	80 e0       	ldi	r24, 0x00	; 0
				//x=(((PIND&(1<<(pinnum)))>>(pinnum)));
				break;
		}
	
				return x;	
}	
     474:	08 95       	ret

00000476 <DIO_vpullup>:
		
		
	void DIO_vpullup(char portname ,char pinnum,char conn)
{
		switch (portname)
     476:	84 34       	cpi	r24, 0x44	; 68
     478:	09 f4       	brne	.+2      	; 0x47c <DIO_vpullup+0x6>
     47a:	71 c0       	rjmp	.+226    	; 0x55e <DIO_vpullup+0xe8>
     47c:	85 34       	cpi	r24, 0x45	; 69
     47e:	48 f4       	brcc	.+18     	; 0x492 <DIO_vpullup+0x1c>
     480:	82 34       	cpi	r24, 0x42	; 66
     482:	99 f1       	breq	.+102    	; 0x4ea <DIO_vpullup+0x74>
     484:	83 34       	cpi	r24, 0x43	; 67
     486:	08 f0       	brcs	.+2      	; 0x48a <DIO_vpullup+0x14>
     488:	4d c0       	rjmp	.+154    	; 0x524 <DIO_vpullup+0xae>
     48a:	81 34       	cpi	r24, 0x41	; 65
     48c:	09 f0       	breq	.+2      	; 0x490 <DIO_vpullup+0x1a>
     48e:	83 c0       	rjmp	.+262    	; 0x596 <DIO_vpullup+0x120>
     490:	0f c0       	rjmp	.+30     	; 0x4b0 <DIO_vpullup+0x3a>
     492:	82 36       	cpi	r24, 0x62	; 98
     494:	51 f1       	breq	.+84     	; 0x4ea <DIO_vpullup+0x74>
     496:	83 36       	cpi	r24, 0x63	; 99
     498:	20 f4       	brcc	.+8      	; 0x4a2 <DIO_vpullup+0x2c>
     49a:	81 36       	cpi	r24, 0x61	; 97
     49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_vpullup+0x2a>
     49e:	7b c0       	rjmp	.+246    	; 0x596 <DIO_vpullup+0x120>
     4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <DIO_vpullup+0x3a>
     4a2:	83 36       	cpi	r24, 0x63	; 99
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <DIO_vpullup+0x32>
     4a6:	3e c0       	rjmp	.+124    	; 0x524 <DIO_vpullup+0xae>
     4a8:	84 36       	cpi	r24, 0x64	; 100
     4aa:	09 f0       	breq	.+2      	; 0x4ae <DIO_vpullup+0x38>
     4ac:	74 c0       	rjmp	.+232    	; 0x596 <DIO_vpullup+0x120>
     4ae:	57 c0       	rjmp	.+174    	; 0x55e <DIO_vpullup+0xe8>
		{
			case 'A':
			case 'a':
				if (conn==1)
     4b0:	41 30       	cpi	r20, 0x01	; 1
     4b2:	69 f4       	brne	.+26     	; 0x4ce <DIO_vpullup+0x58>
				{
					SET_BIT(PORTA,pinnum);
     4b4:	2b b3       	in	r18, 0x1b	; 27
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	ac 01       	movw	r20, r24
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_vpullup+0x4c>
     4be:	44 0f       	add	r20, r20
     4c0:	55 1f       	adc	r21, r21
     4c2:	6a 95       	dec	r22
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_vpullup+0x48>
     4c6:	ba 01       	movw	r22, r20
     4c8:	62 2b       	or	r22, r18
     4ca:	6b bb       	out	0x1b, r22	; 27
     4cc:	08 95       	ret
					//PORTA |= (1<<pinnum);
				}
				
				else
				{
					CLR_BIT(PORTA,pinnum);
     4ce:	2b b3       	in	r18, 0x1b	; 27
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	ac 01       	movw	r20, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_vpullup+0x66>
     4d8:	44 0f       	add	r20, r20
     4da:	55 1f       	adc	r21, r21
     4dc:	6a 95       	dec	r22
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_vpullup+0x62>
     4e0:	ba 01       	movw	r22, r20
     4e2:	60 95       	com	r22
     4e4:	62 23       	and	r22, r18
     4e6:	6b bb       	out	0x1b, r22	; 27
     4e8:	08 95       	ret
				
				break;
				
			case 'B':
			case 'b':
				if (conn==1)
     4ea:	41 30       	cpi	r20, 0x01	; 1
     4ec:	69 f4       	brne	.+26     	; 0x508 <DIO_vpullup+0x92>
				{
					SET_BIT(PORTB,pinnum);
     4ee:	28 b3       	in	r18, 0x18	; 24
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	ac 01       	movw	r20, r24
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_vpullup+0x86>
     4f8:	44 0f       	add	r20, r20
     4fa:	55 1f       	adc	r21, r21
     4fc:	6a 95       	dec	r22
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_vpullup+0x82>
     500:	ba 01       	movw	r22, r20
     502:	62 2b       	or	r22, r18
     504:	68 bb       	out	0x18, r22	; 24
     506:	08 95       	ret
					//PORTB |= (1<<pinnum);
				}
				
				else
				{
					CLR_BIT(PORTB,pinnum);
     508:	28 b3       	in	r18, 0x18	; 24
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ac 01       	movw	r20, r24
     510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_vpullup+0xa0>
     512:	44 0f       	add	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	6a 95       	dec	r22
     518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_vpullup+0x9c>
     51a:	ba 01       	movw	r22, r20
     51c:	60 95       	com	r22
     51e:	62 23       	and	r22, r18
     520:	68 bb       	out	0x18, r22	; 24
     522:	08 95       	ret
				break;
				
			case 'C':
			case 'c':
				
				if (conn==1)
     524:	41 30       	cpi	r20, 0x01	; 1
     526:	69 f4       	brne	.+26     	; 0x542 <DIO_vpullup+0xcc>
				{
					SET_BIT(PORTC,pinnum);
     528:	25 b3       	in	r18, 0x15	; 21
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	ac 01       	movw	r20, r24
     530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_vpullup+0xc0>
     532:	44 0f       	add	r20, r20
     534:	55 1f       	adc	r21, r21
     536:	6a 95       	dec	r22
     538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_vpullup+0xbc>
     53a:	ba 01       	movw	r22, r20
     53c:	62 2b       	or	r22, r18
     53e:	65 bb       	out	0x15, r22	; 21
     540:	08 95       	ret
					//PORTC |= (1<<pinnum);
				}
				
				else
				{
					CLR_BIT(PORTC,pinnum);
     542:	25 b3       	in	r18, 0x15	; 21
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	ac 01       	movw	r20, r24
     54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_vpullup+0xda>
     54c:	44 0f       	add	r20, r20
     54e:	55 1f       	adc	r21, r21
     550:	6a 95       	dec	r22
     552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_vpullup+0xd6>
     554:	ba 01       	movw	r22, r20
     556:	60 95       	com	r22
     558:	62 23       	and	r22, r18
     55a:	65 bb       	out	0x15, r22	; 21
     55c:	08 95       	ret
				break;
				
			case 'D':
			case 'd':
				
				if (conn==1)
     55e:	41 30       	cpi	r20, 0x01	; 1
     560:	69 f4       	brne	.+26     	; 0x57c <DIO_vpullup+0x106>
				{
					SET_BIT(PORTD,pinnum);
     562:	22 b3       	in	r18, 0x12	; 18
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	ac 01       	movw	r20, r24
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_vpullup+0xfa>
     56c:	44 0f       	add	r20, r20
     56e:	55 1f       	adc	r21, r21
     570:	6a 95       	dec	r22
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_vpullup+0xf6>
     574:	ba 01       	movw	r22, r20
     576:	62 2b       	or	r22, r18
     578:	62 bb       	out	0x12, r22	; 18
     57a:	08 95       	ret
					//PORTD |= (1<<pinnum);
				}
				
				else
				{
					CLR_BIT(PORTD,pinnum);
     57c:	22 b3       	in	r18, 0x12	; 18
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	ac 01       	movw	r20, r24
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_vpullup+0x114>
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_vpullup+0x110>
     58e:	ba 01       	movw	r22, r20
     590:	60 95       	com	r22
     592:	62 23       	and	r22, r18
     594:	62 bb       	out	0x12, r22	; 18
     596:	08 95       	ret

00000598 <DIO_vPORTSET>:
		}			 
}
				
	void DIO_vPORTSET(char portName , char val)				
{
		switch(portName)
     598:	82 34       	cpi	r24, 0x42	; 66
     59a:	61 f0       	breq	.+24     	; 0x5b4 <DIO_vPORTSET+0x1c>
     59c:	83 34       	cpi	r24, 0x43	; 67
     59e:	18 f4       	brcc	.+6      	; 0x5a6 <DIO_vPORTSET+0xe>
     5a0:	81 34       	cpi	r24, 0x41	; 65
     5a2:	69 f4       	brne	.+26     	; 0x5be <DIO_vPORTSET+0x26>
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <DIO_vPORTSET+0x18>
     5a6:	83 34       	cpi	r24, 0x43	; 67
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <DIO_vPORTSET+0x20>
     5aa:	84 34       	cpi	r24, 0x44	; 68
     5ac:	41 f4       	brne	.+16     	; 0x5be <DIO_vPORTSET+0x26>
     5ae:	06 c0       	rjmp	.+12     	; 0x5bc <DIO_vPORTSET+0x24>
		{
				case 'A':
				
					PORTA = val;	
     5b0:	6b bb       	out	0x1b, r22	; 27
					break;
     5b2:	08 95       	ret
					
				case 'B':
				
					PORTB = val;
     5b4:	68 bb       	out	0x18, r22	; 24
					break;
     5b6:	08 95       	ret
					
				case 'C':
					PORTC = val;
     5b8:	65 bb       	out	0x15, r22	; 21
					break;
     5ba:	08 95       	ret
					
				case 'D':
					PORTD = val;
     5bc:	62 bb       	out	0x12, r22	; 18
     5be:	08 95       	ret

000005c0 <EEPROM_vWrite>:
//#include <avr/io.h>
//#include "EEPROM.h"
#include "COMMON_CONFIG.h"
	void EEPROM_vWrite(char data, unsigned short addrs)
{
		while (READ_BIT_SET(EECR,EEWE)==1)
     5c0:	e1 99       	sbic	0x1c, 1	; 28
     5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <EEPROM_vWrite>
		{
			/*to wait the first wirte instruction */
		} 
		
		EEDR= data;
     5c4:	8d bb       	out	0x1d, r24	; 29
		
		EEAR=addrs;
     5c6:	7f bb       	out	0x1f, r23	; 31
     5c8:	6e bb       	out	0x1e, r22	; 30
		
		SET_BIT(EECR,EEMWE);
     5ca:	e2 9a       	sbi	0x1c, 2	; 28
		SET_BIT(EECR,EEWE);
     5cc:	e1 9a       	sbi	0x1c, 1	; 28
	
		
}
     5ce:	08 95       	ret

000005d0 <EEPROM_vRead>:

	unsigned char EEPROM_vRead(unsigned short addrs)
{ 
 		while (READ_BIT_SET(EECR,EEWE)==1)
     5d0:	e1 99       	sbic	0x1c, 1	; 28
     5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <EEPROM_vRead>
		 {
			 /*to check no one write while i read*/
		 }
			  
		EEAR = addrs;
     5d4:	9f bb       	out	0x1f, r25	; 31
     5d6:	8e bb       	out	0x1e, r24	; 30
		SET_BIT(EEDR,EERE);
     5d8:	e8 9a       	sbi	0x1d, 0	; 29
		return EEDR;
     5da:	8d b3       	in	r24, 0x1d	; 29
     5dc:	08 95       	ret

000005de <tot_inti>:

#include "COMMON_CONFIG.h"

void tot_inti()
{
	KEYPAD_VINIT();
     5de:	0e 94 b0 0a 	call	0x1560	; 0x1560 <KEYPAD_VINIT>
	//SPI_vINTMASTRE();
	SPI_vINTSlave();
     5e2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <SPI_vINTSlave>
	LCD_vint();
     5e6:	0e 94 92 0b 	call	0x1724	; 0x1724 <LCD_vint>
	ADC_vint();
     5ea:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vint>
	TIMER_vInt();
     5ee:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <TIMER_vInt>
	
	
}
     5f2:	08 95       	ret

000005f4 <Welcome_Message>:
//This function prints a welcome message to the user
void Welcome_Message()
{
	LCD_vSDD("Welcome");
     5f4:	80 e6       	ldi	r24, 0x60	; 96
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vCLEARS();
     5fc:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_vCLEARS>
	
}
     600:	08 95       	ret

00000602 <LCD_StrtDis>:
	char *ptr1 = arr1 ;
	char *ptr2 = arr2 ;
	char key ;
	
	
	LCD_vSendCmd(0x01);
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
}


char LCD_StrtDis()
{
	char arr1 = "0 : Guest Mode" ;
     608:	88 e6       	ldi	r24, 0x68	; 104
     60a:	90 e0       	ldi	r25, 0x00	; 0
	char *ptr2 = arr2 ;
	char key ;
	
	
	LCD_vSendCmd(0x01);
	LCD_vSDD(ptr1);
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>


char LCD_StrtDis()
{
	char arr1 = "0 : Guest Mode" ;
	char arr2 = "1 : Admin Mode" ;
     61a:	87 e7       	ldi	r24, 0x77	; 119
     61c:	90 e0       	ldi	r25, 0x00	; 0
	
	
	LCD_vSendCmd(0x01);
	LCD_vSDD(ptr1);
	LCD_vMOVECur(2,1);
	LCD_vSDD(ptr2);
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	
	/* take from keypad 0 or 1 */
	/* Wait until a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);
     624:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     628:	8f 3f       	cpi	r24, 0xFF	; 255
     62a:	e1 f3       	breq	.-8      	; 0x624 <LCD_StrtDis+0x22>
	key = KEYPAD_u8SCAN();
     62c:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
	
	PTR_COUNT->pw_count = 0 ;
     630:	e0 91 7b 01 	lds	r30, 0x017B
     634:	f0 91 7c 01 	lds	r31, 0x017C
     638:	12 82       	std	Z+2, r1	; 0x02
     63a:	11 82       	std	Z+1, r1	; 0x01
	while( (PTR_COUNT->pw_count) < 250 );
     63c:	e0 91 7b 01 	lds	r30, 0x017B
     640:	f0 91 7c 01 	lds	r31, 0x017C
     644:	21 81       	ldd	r18, Z+1	; 0x01
     646:	32 81       	ldd	r19, Z+2	; 0x02
     648:	2a 3f       	cpi	r18, 0xFA	; 250
     64a:	31 05       	cpc	r19, r1
     64c:	d8 f3       	brcs	.-10     	; 0x644 <LCD_StrtDis+0x42>
	return key ;
}
     64e:	08 95       	ret

00000650 <LCD_PassDis1>:


char * LCD_PassDis1()
{
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <LCD_PassDis1+0xc>
     65c:	00 d0       	rcall	.+0      	; 0x65e <LCD_PassDis1+0xe>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
	char pass[4] ;
	char *Pw_ptr = pass ;
	char x;
	
	
	LCD_vSendCmd(0x01);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
}


char * LCD_PassDis1()
{
	char arr0 = "Enter Password" ;
     668:	86 e8       	ldi	r24, 0x86	; 134
     66a:	90 e0       	ldi	r25, 0x00	; 0
	char *Pw_ptr = pass ;
	char x;
	
	
	LCD_vSendCmd(0x01);
	LCD_vSDD(ptr0);
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
     67a:	7e 01       	movw	r14, r28
     67c:	08 94       	sec
     67e:	e1 1c       	adc	r14, r1
     680:	f1 1c       	adc	r15, r1
	
	for(x = 0 ; x < 4 ; ++x)
     682:	10 e0       	ldi	r17, 0x00	; 0
	{	
		/* WAIT UNTILL A KEY TO BE PRESSED */
		while(KEYPAD_u8SCAN() == NoScan);
     684:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     688:	8f 3f       	cpi	r24, 0xFF	; 255
     68a:	e1 f3       	breq	.-8      	; 0x684 <LCD_PassDis1+0x34>
		
		/* SEND THE PRESSED KEY TO AN ARRAY OF 4 CHAR */
		pass[x] =  KEYPAD_u8SCAN();
     68c:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     690:	f7 01       	movw	r30, r14
     692:	81 93       	st	Z+, r24
     694:	7f 01       	movw	r14, r30
		
		/* SEND THE PRESSED KEY TO THE LCD */
		LCD_vsenddata( pass[x] );
     696:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
		
		if(x != 3){
     69a:	13 30       	cpi	r17, 0x03	; 3
     69c:	a9 f1       	breq	.+106    	; 0x708 <LCD_PassDis1+0xb8>
			/*	DELAY OF * SECURITY SYMPOL	*/
			PTR_COUNT->pw_count = 0 ;
     69e:	e0 91 7b 01 	lds	r30, 0x017B
     6a2:	f0 91 7c 01 	lds	r31, 0x017C
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	11 82       	std	Z+1, r1	; 0x01
			while( (PTR_COUNT->pw_count) < 500 );
     6aa:	e0 91 7b 01 	lds	r30, 0x017B
     6ae:	f0 91 7c 01 	lds	r31, 0x017C
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	92 81       	ldd	r25, Z+2	; 0x02
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	84 3f       	cpi	r24, 0xF4	; 244
     6ba:	92 07       	cpc	r25, r18
     6bc:	d0 f3       	brcs	.-12     	; 0x6b2 <LCD_PassDis1+0x62>
		}
		
		LCD_vMOVECur(2, x+1);
     6be:	1f 5f       	subi	r17, 0xFF	; 255
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	61 2f       	mov	r22, r17
     6c4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     6c8:	8a e2       	ldi	r24, 0x2A	; 42
     6ca:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
	
	LCD_vSendCmd(0x01);
	LCD_vSDD(ptr0);
	LCD_vMOVECur(2,1);
	
	for(x = 0 ; x < 4 ; ++x)
     6ce:	14 30       	cpi	r17, 0x04	; 4
     6d0:	c9 f6       	brne	.-78     	; 0x684 <LCD_PassDis1+0x34>
		LCD_vMOVECur(2, x+1);
		LCD_vsenddata('*');
	
	}
	/*  WAIT 250ms AFTER I SENDD THE LAST *	*/
	PTR_COUNT->pw_count = 0 ;
     6d2:	e0 91 7b 01 	lds	r30, 0x017B
     6d6:	f0 91 7c 01 	lds	r31, 0x017C
     6da:	12 82       	std	Z+2, r1	; 0x02
     6dc:	11 82       	std	Z+1, r1	; 0x01
	while( (PTR_COUNT->pw_count) < 250 );
     6de:	e0 91 7b 01 	lds	r30, 0x017B
     6e2:	f0 91 7c 01 	lds	r31, 0x017C
     6e6:	81 81       	ldd	r24, Z+1	; 0x01
     6e8:	92 81       	ldd	r25, Z+2	; 0x02
     6ea:	8a 3f       	cpi	r24, 0xFA	; 250
     6ec:	91 05       	cpc	r25, r1
     6ee:	d8 f3       	brcs	.-10     	; 0x6e6 <LCD_PassDis1+0x96>
	
	return Pw_ptr ;
}
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	08 95       	ret
			/*	DELAY OF * SECURITY SYMPOL	*/
			PTR_COUNT->pw_count = 0 ;
			while( (PTR_COUNT->pw_count) < 500 );
		}
		
		LCD_vMOVECur(2, x+1);
     708:	61 2f       	mov	r22, r17
     70a:	6f 5f       	subi	r22, 0xFF	; 255
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     712:	8a e2       	ldi	r24, 0x2A	; 42
     714:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
     718:	dc cf       	rjmp	.-72     	; 0x6d2 <LCD_PassDis1+0x82>

0000071a <LCD_PassDis2>:
	return Pw_ptr ;
}


char * LCD_PassDis2()
{
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	00 d0       	rcall	.+0      	; 0x726 <LCD_PassDis2+0xc>
     726:	00 d0       	rcall	.+0      	; 0x728 <LCD_PassDis2+0xe>
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	char pass[4] ;
	char *Pw_ptr = pass ;
	char x;
	
	
	LCD_vMOVECur(2,1);
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
     734:	7e 01       	movw	r14, r28
     736:	08 94       	sec
     738:	e1 1c       	adc	r14, r1
     73a:	f1 1c       	adc	r15, r1
	
	for(x = 0 ; x < 4 ; ++x)
     73c:	10 e0       	ldi	r17, 0x00	; 0
	{
		while( KEYPAD_u8SCAN() == NoScan);
     73e:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     742:	8f 3f       	cpi	r24, 0xFF	; 255
     744:	e1 f3       	breq	.-8      	; 0x73e <LCD_PassDis2+0x24>
		
		pass[x] =  KEYPAD_u8SCAN(); ;
     746:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     74a:	f7 01       	movw	r30, r14
     74c:	81 93       	st	Z+, r24
     74e:	7f 01       	movw	r14, r30
		LCD_vsenddata( pass[x] );
     750:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
		
		if(x != 3)
     754:	13 30       	cpi	r17, 0x03	; 3
     756:	31 f1       	breq	.+76     	; 0x7a4 <LCD_PassDis2+0x8a>
		{
			/*	DELAY OF * SECURITY SYMPOL	*/
			PTR_COUNT->pw_count = 0 ;
     758:	e0 91 7b 01 	lds	r30, 0x017B
     75c:	f0 91 7c 01 	lds	r31, 0x017C
     760:	12 82       	std	Z+2, r1	; 0x02
     762:	11 82       	std	Z+1, r1	; 0x01
			while( (PTR_COUNT->pw_count) < 500 );
     764:	e0 91 7b 01 	lds	r30, 0x017B
     768:	f0 91 7c 01 	lds	r31, 0x017C
     76c:	81 81       	ldd	r24, Z+1	; 0x01
     76e:	92 81       	ldd	r25, Z+2	; 0x02
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	84 3f       	cpi	r24, 0xF4	; 244
     774:	92 07       	cpc	r25, r18
     776:	d0 f3       	brcs	.-12     	; 0x76c <LCD_PassDis2+0x52>
		}
		
		LCD_vMOVECur(2 , x+1);
     778:	1f 5f       	subi	r17, 0xFF	; 255
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	61 2f       	mov	r22, r17
     77e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     782:	8a e2       	ldi	r24, 0x2A	; 42
     784:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
	char x;
	
	
	LCD_vMOVECur(2,1);
	
	for(x = 0 ; x < 4 ; ++x)
     788:	14 30       	cpi	r17, 0x04	; 4
     78a:	c9 f6       	brne	.-78     	; 0x73e <LCD_PassDis2+0x24>
		
		LCD_vMOVECur(2 , x+1);
		LCD_vsenddata('*');
	}
	return Pw_ptr ;
}
     78c:	ce 01       	movw	r24, r28
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	08 95       	ret
			/*	DELAY OF * SECURITY SYMPOL	*/
			PTR_COUNT->pw_count = 0 ;
			while( (PTR_COUNT->pw_count) < 500 );
		}
		
		LCD_vMOVECur(2 , x+1);
     7a4:	61 2f       	mov	r22, r17
     7a6:	6f 5f       	subi	r22, 0xFF	; 255
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     7ae:	8a e2       	ldi	r24, 0x2A	; 42
     7b0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
     7b4:	eb cf       	rjmp	.-42     	; 0x78c <LCD_PassDis2+0x72>

000007b6 <TryAgain>:


//This function for Try again

char TryAgain(char Blocked)
{
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	a1 97       	sbiw	r28, 0x21	; 33
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
	char arr1[] = "Failed Once";
     7ca:	de 01       	movw	r26, r28
     7cc:	11 96       	adiw	r26, 0x01	; 1
     7ce:	e5 e9       	ldi	r30, 0x95	; 149
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	9c e0       	ldi	r25, 0x0C	; 12
     7d4:	01 90       	ld	r0, Z+
     7d6:	0d 92       	st	X+, r0
     7d8:	91 50       	subi	r25, 0x01	; 1
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <TryAgain+0x1e>
	char arr2[] = "Failed Twice";
     7dc:	de 01       	movw	r26, r28
     7de:	1d 96       	adiw	r26, 0x0d	; 13
     7e0:	e1 ea       	ldi	r30, 0xA1	; 161
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	9d e0       	ldi	r25, 0x0D	; 13
     7e6:	01 90       	ld	r0, Z+
     7e8:	0d 92       	st	X+, r0
     7ea:	91 50       	subi	r25, 0x01	; 1
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <TryAgain+0x30>
	char arr3[] = "BLOCKED";
     7ee:	de 01       	movw	r26, r28
     7f0:	5a 96       	adiw	r26, 0x1a	; 26
     7f2:	ee ea       	ldi	r30, 0xAE	; 174
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	98 e0       	ldi	r25, 0x08	; 8
     7f8:	01 90       	ld	r0, Z+
     7fa:	0d 92       	st	X+, r0
     7fc:	91 50       	subi	r25, 0x01	; 1
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <TryAgain+0x42>
	char *BLK_ptr ;
	
	switch(Blocked)
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	31 f1       	breq	.+76     	; 0x850 <TryAgain+0x9a>
     804:	83 30       	cpi	r24, 0x03	; 3
     806:	09 f4       	brne	.+2      	; 0x80a <TryAgain+0x54>
     808:	45 c0       	rjmp	.+138    	; 0x894 <__stack+0x35>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	09 f0       	breq	.+2      	; 0x810 <TryAgain+0x5a>
     80e:	4b c0       	rjmp	.+150    	; 0x8a6 <__stack+0x47>
	{
		case 1:
		BLK_ptr = arr1;
		LCD_vSendCmd(0x01);
     810:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		LCD_vSDD(BLK_ptr);
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
		return Password_inFun(LCD_PassDis2());
     81c:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_PassDis2>
     820:	e8 2f       	mov	r30, r24
     822:	f9 2f       	mov	r31, r25
     824:	34 e0       	ldi	r19, 0x04	; 4
/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
     826:	80 e0       	ldi	r24, 0x00	; 0


/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
     828:	94 e0       	ldi	r25, 0x04	; 4
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     82a:	51 e0       	ldi	r21, 0x01	; 1
     82c:	0d c0       	rjmp	.+26     	; 0x848 <TryAgain+0x92>
     82e:	25 2f       	mov	r18, r21
			x *= 2 ;
     830:	22 0f       	add	r18, r18
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     832:	91 50       	subi	r25, 0x01	; 1
     834:	91 30       	cpi	r25, 0x01	; 1
     836:	e1 f7       	brne	.-8      	; 0x830 <TryAgain+0x7a>
			x *= 2 ;
		}
		Password += (*(Pw_ptr + i)) * x ;
     838:	41 91       	ld	r20, Z+
     83a:	24 9f       	mul	r18, r20
     83c:	20 2d       	mov	r18, r0
     83e:	11 24       	eor	r1, r1
     840:	82 0f       	add	r24, r18

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
     842:	91 50       	subi	r25, 0x01	; 1
     844:	31 50       	subi	r19, 0x01	; 1
     846:	79 f1       	breq	.+94     	; 0x8a6 <__stack+0x47>
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     848:	92 30       	cpi	r25, 0x02	; 2
     84a:	88 f7       	brcc	.-30     	; 0x82e <TryAgain+0x78>
     84c:	25 2f       	mov	r18, r21
     84e:	f4 cf       	rjmp	.-24     	; 0x838 <TryAgain+0x82>
		break;
		
		case 2:
		BLK_ptr = arr2 ;
		LCD_vSendCmd(0x01);
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		LCD_vSDD(BLK_ptr);
     856:	ce 01       	movw	r24, r28
     858:	0d 96       	adiw	r24, 0x0d	; 13
     85a:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
		return Password_inFun(LCD_PassDis2());
     85e:	0e 94 8d 03 	call	0x71a	; 0x71a <LCD_PassDis2>
     862:	e8 2f       	mov	r30, r24
     864:	f9 2f       	mov	r31, r25
/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
     866:	80 e0       	ldi	r24, 0x00	; 0
	for( i = 0 ; i < 4 ; ++i , --j)
     868:	30 e0       	ldi	r19, 0x00	; 0


/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
     86a:	94 e0       	ldi	r25, 0x04	; 4
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     86c:	51 e0       	ldi	r21, 0x01	; 1
     86e:	0e c0       	rjmp	.+28     	; 0x88c <__stack+0x2d>
     870:	25 2f       	mov	r18, r21
			x *= 2 ;
     872:	22 0f       	add	r18, r18
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     874:	91 50       	subi	r25, 0x01	; 1
     876:	91 30       	cpi	r25, 0x01	; 1
     878:	e1 f7       	brne	.-8      	; 0x872 <__stack+0x13>
			x *= 2 ;
		}
		Password += (*(Pw_ptr + i)) * x ;
     87a:	41 91       	ld	r20, Z+
     87c:	24 9f       	mul	r18, r20
     87e:	20 2d       	mov	r18, r0
     880:	11 24       	eor	r1, r1
     882:	82 0f       	add	r24, r18

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
     884:	3f 5f       	subi	r19, 0xFF	; 255
     886:	91 50       	subi	r25, 0x01	; 1
     888:	34 30       	cpi	r19, 0x04	; 4
     88a:	69 f0       	breq	.+26     	; 0x8a6 <__stack+0x47>
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     88c:	92 30       	cpi	r25, 0x02	; 2
     88e:	80 f7       	brcc	.-32     	; 0x870 <__stack+0x11>
     890:	25 2f       	mov	r18, r21
     892:	f3 cf       	rjmp	.-26     	; 0x87a <__stack+0x1b>
		break;
		
		case 3:
		BLK_ptr = arr3 ;
		LCD_vSendCmd(0x01);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		LCD_vSDD(BLK_ptr);
     89a:	ce 01       	movw	r24, r28
     89c:	4a 96       	adiw	r24, 0x1a	; 26
     89e:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
		return stop;
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <__stack+0x47>
		break;
	}
}
     8a6:	a1 96       	adiw	r28, 0x21	; 33
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <Check_Password_Correct>:

//This function for if the password correct or not
char Check_Password_Correct ()
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
	char BlockTime = 0 ;
	char Pass ;
	Pass = Password_inFun(LCD_PassDis1());
     8c2:	0e 94 28 03 	call	0x650	; 0x650 <LCD_PassDis1>
     8c6:	e8 2f       	mov	r30, r24
     8c8:	f9 2f       	mov	r31, r25
     8ca:	24 e0       	ldi	r18, 0x04	; 4
/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
     8cc:	c0 e0       	ldi	r28, 0x00	; 0


/* FUNCTION THAT MAKES A SIMPLE EQUATION TO SAVE THE PASSWORD IN 1 BYTE	*/

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
     8ce:	84 e0       	ldi	r24, 0x04	; 4
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	0d c0       	rjmp	.+26     	; 0x8ee <Check_Password_Correct+0x36>
     8d4:	94 2f       	mov	r25, r20
			x *= 2 ;
     8d6:	99 0f       	add	r25, r25
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     8d8:	81 50       	subi	r24, 0x01	; 1
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <Check_Password_Correct+0x1e>
			x *= 2 ;
		}
		Password += (*(Pw_ptr + i)) * x ;
     8de:	31 91       	ld	r19, Z+
     8e0:	93 9f       	mul	r25, r19
     8e2:	90 2d       	mov	r25, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	c9 0f       	add	r28, r25

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	21 50       	subi	r18, 0x01	; 1
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <Check_Password_Correct+0x3e>
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	88 f7       	brcc	.-30     	; 0x8d4 <Check_Password_Correct+0x1c>
     8f2:	94 2f       	mov	r25, r20
     8f4:	f4 cf       	rjmp	.-24     	; 0x8de <Check_Password_Correct+0x26>

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
     8f6:	10 e0       	ldi	r17, 0x00	; 0

	again:
	
	if(Pass == EEPROM_vRead(admin_addrs))
     8f8:	80 e1       	ldi	r24, 0x10	; 16
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <EEPROM_vRead>
     900:	8c 17       	cp	r24, r28
     902:	e1 f1       	breq	.+120    	; 0x97c <Check_Password_Correct+0xc4>
	{
		return HIGH;
	}
	else
	{
		++BlockTime ;
     904:	1f 5f       	subi	r17, 0xFF	; 255
		if(BlockTime < 3)
     906:	13 30       	cpi	r17, 0x03	; 3
     908:	a1 f1       	breq	.+104    	; 0x972 <Check_Password_Correct+0xba>
		{
		
			
			/*	WAITING FOR NEXT SCREEN	*/
			PTR_COUNT->keypad_count = 0;
     90a:	e0 91 7b 01 	lds	r30, 0x017B
     90e:	f0 91 7c 01 	lds	r31, 0x017C
     912:	10 82       	st	Z, r1
			while(PTR_COUNT->keypad_count < Q_SEC);
     914:	c0 91 7b 01 	lds	r28, 0x017B
     918:	d0 91 7c 01 	lds	r29, 0x017C
     91c:	68 81       	ld	r22, Y
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	48 ec       	ldi	r20, 0xC8	; 200
     92e:	51 e4       	ldi	r21, 0x41	; 65
     930:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	94 f3       	brlt	.-28     	; 0x91c <Check_Password_Correct+0x64>
			
			Pass = TryAgain(BlockTime);
     938:	81 2f       	mov	r24, r17
     93a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TryAgain>
     93e:	c8 2f       	mov	r28, r24
			
			/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
			PTR_COUNT->keypad_count = 0;
     940:	e0 91 7b 01 	lds	r30, 0x017B
     944:	f0 91 7c 01 	lds	r31, 0x017C
     948:	10 82       	st	Z, r1
			while(PTR_COUNT->keypad_count < Q_SEC);
     94a:	e0 90 7b 01 	lds	r14, 0x017B
     94e:	f0 90 7c 01 	lds	r15, 0x017C
     952:	f7 01       	movw	r30, r14
     954:	60 81       	ld	r22, Z
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	48 ec       	ldi	r20, 0xC8	; 200
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     96c:	88 23       	and	r24, r24
     96e:	8c f3       	brlt	.-30     	; 0x952 <Check_Password_Correct+0x9a>
     970:	c3 cf       	rjmp	.-122    	; 0x8f8 <Check_Password_Correct+0x40>
			
			goto again;
		}
		else
		{
			Pass = TryAgain(BlockTime);
     972:	81 2f       	mov	r24, r17
     974:	0e 94 db 03 	call	0x7b6	; 0x7b6 <TryAgain>
			/*	BLOCKED	*/
			return LOW ;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	01 c0       	rjmp	.+2      	; 0x97e <Check_Password_Correct+0xc6>

	again:
	
	if(Pass == EEPROM_vRead(admin_addrs))
	{
		return HIGH;
     97c:	81 e0       	ldi	r24, 0x01	; 1
			Pass = TryAgain(BlockTime);
			/*	BLOCKED	*/
			return LOW ;
		}
	}
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <BlockPower>:


/* BLOCKING DISPLAY	*/
void BlockPower()
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	28 97       	sbiw	r28, 0x08	; 8
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	char arr0 [] = "BLOCKED" ;
     99e:	de 01       	movw	r26, r28
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	ee ea       	ldi	r30, 0xAE	; 174
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	88 e0       	ldi	r24, 0x08	; 8
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <BlockPower+0x1e>
	char *ptr = arr0 ;
	LCD_vSDD(ptr);
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
}
     9b8:	28 96       	adiw	r28, 0x08	; 8
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <Block>:

/* RETURN BLOCK PASS OR FAIL BY CHECKING THE BLOCK ADDRESS IN EEPROM	*/
void Block(char block)
{
	if(block == LOW){
     9ca:	88 23       	and	r24, r24
     9cc:	29 f4       	brne	.+10     	; 0x9d8 <Block+0xe>
		EEPROM_vWrite(LOW , BLock_Addrs);
     9ce:	60 e2       	ldi	r22, 0x20	; 32
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <EEPROM_vWrite>
     9d6:	08 95       	ret
	}
	else if(block == HIGH){
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	21 f4       	brne	.+8      	; 0x9e4 <Block+0x1a>
		EEPROM_vWrite(HIGH , BLock_Addrs);
     9dc:	60 e2       	ldi	r22, 0x20	; 32
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <EEPROM_vWrite>
     9e4:	08 95       	ret

000009e6 <Check_NoPass>:

/* CHECK IF NO PASSWORD  IN EEPROM	*/

char Check_NoPass()
{
	if(EEPROM_vRead(admin_addrs) == CLEAR)
     9e6:	80 e1       	ldi	r24, 0x10	; 16
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <EEPROM_vRead>
	{
		return HIGH ;
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	8f 3f       	cpi	r24, 0xFF	; 255
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <Check_NoPass+0x10>
     9f4:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return LOW ;
	}
}
     9f6:	89 2f       	mov	r24, r25
     9f8:	08 95       	ret

000009fa <Set_Pass>:

/* DISPLAY SET PASSWORD , TAKE IT AND SAVE IT IN EEPROM */

void Set_Pass()
{
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	61 97       	sbiw	r28, 0x11	; 17
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "Set Password" ;
     a18:	de 01       	movw	r26, r28
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	e6 eb       	ldi	r30, 0xB6	; 182
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	8d e0       	ldi	r24, 0x0D	; 13
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	81 50       	subi	r24, 0x01	; 1
     a28:	e1 f7       	brne	.-8      	; 0xa22 <Set_Pass+0x28>
	char pass[4] ;
	char *Pw_ptr = pass ;
	char x;

	
	LCD_vSendCmd(0x01);
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr0);
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
     a40:	0f 2e       	mov	r0, r31
     a42:	fe e0       	ldi	r31, 0x0E	; 14
     a44:	cf 2e       	mov	r12, r31
     a46:	dd 24       	eor	r13, r13
     a48:	f0 2d       	mov	r31, r0
     a4a:	cc 0e       	add	r12, r28
     a4c:	dd 1e       	adc	r13, r29
	
	for(x = 0 ; x < 4 ; ++x){
     a4e:	ff 24       	eor	r15, r15
		while( KEYPAD_u8SCAN() == NoScan);
     a50:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     a54:	8f 3f       	cpi	r24, 0xFF	; 255
     a56:	e1 f3       	breq	.-8      	; 0xa50 <Set_Pass+0x56>
		
		pass[x] =  KEYPAD_u8SCAN(); ;
     a58:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     a5c:	f6 01       	movw	r30, r12
     a5e:	81 93       	st	Z+, r24
     a60:	6f 01       	movw	r12, r30
		LCD_vsenddata( pass[x] );
     a62:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
		
		if(x != 3){
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	ff 16       	cp	r15, r31
     a6a:	09 f4       	brne	.+2      	; 0xa6e <Set_Pass+0x74>
     a6c:	5c c0       	rjmp	.+184    	; 0xb26 <Set_Pass+0x12c>
			
			/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
			PTR_COUNT->keypad_count = 0;
     a6e:	e0 91 7b 01 	lds	r30, 0x017B
     a72:	f0 91 7c 01 	lds	r31, 0x017C
     a76:	10 82       	st	Z, r1
			while(PTR_COUNT->keypad_count < Q_SEC);
     a78:	00 91 7b 01 	lds	r16, 0x017B
     a7c:	10 91 7c 01 	lds	r17, 0x017C
     a80:	f8 01       	movw	r30, r16
     a82:	60 81       	ld	r22, Z
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	48 ec       	ldi	r20, 0xC8	; 200
     a94:	51 e4       	ldi	r21, 0x41	; 65
     a96:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	8c f3       	brlt	.-30     	; 0xa80 <Set_Pass+0x86>
		}
		
		LCD_vMOVECur(2 , x+1);
     a9e:	f3 94       	inc	r15
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	6f 2d       	mov	r22, r15
     aa4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     aa8:	8a e2       	ldi	r24, 0x2A	; 42
     aaa:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
	
	LCD_vSendCmd(0x01);
	LCD_vSDD(ptr0);
	LCD_vMOVECur(2,1);
	
	for(x = 0 ; x < 4 ; ++x){
     aae:	f4 e0       	ldi	r31, 0x04	; 4
     ab0:	ff 16       	cp	r15, r31
     ab2:	71 f6       	brne	.-100    	; 0xa50 <Set_Pass+0x56>
		
		LCD_vMOVECur(2 , x+1);
		LCD_vsenddata('*');
	}
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     ab4:	e0 91 7b 01 	lds	r30, 0x017B
     ab8:	f0 91 7c 01 	lds	r31, 0x017C
     abc:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < HALF_SEC);
     abe:	e0 91 7b 01 	lds	r30, 0x017B
     ac2:	f0 91 7c 01 	lds	r31, 0x017C
     ac6:	80 81       	ld	r24, Z
     ac8:	82 33       	cpi	r24, 0x32	; 50
     aca:	e8 f3       	brcs	.-6      	; 0xac6 <Set_Pass+0xcc>
     acc:	fe 01       	movw	r30, r28
     ace:	3e 96       	adiw	r30, 0x0e	; 14
	}
}

/* DISPLAY SET PASSWORD , TAKE IT AND SAVE IT IN EEPROM */

void Set_Pass()
     ad0:	9e 01       	movw	r18, r28
     ad2:	2e 5e       	subi	r18, 0xEE	; 238
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	94 e0       	ldi	r25, 0x04	; 4
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	0e c0       	rjmp	.+28     	; 0xafa <Set_Pass+0x100>
     ade:	46 2f       	mov	r20, r22
			x *= 2 ;
     ae0:	44 0f       	add	r20, r20
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     ae2:	91 50       	subi	r25, 0x01	; 1
     ae4:	91 30       	cpi	r25, 0x01	; 1
     ae6:	e1 f7       	brne	.-8      	; 0xae0 <Set_Pass+0xe6>
			x *= 2 ;
		}
		Password += (*(Pw_ptr + i)) * x ;
     ae8:	51 91       	ld	r21, Z+
     aea:	45 9f       	mul	r20, r21
     aec:	40 2d       	mov	r20, r0
     aee:	11 24       	eor	r1, r1
     af0:	84 0f       	add	r24, r20

char inline Password_inFun(char * Pw_ptr){
	char i,x , j = 4 ;
	
	char Password = 0;
	for( i = 0 ; i < 4 ; ++i , --j)
     af2:	91 50       	subi	r25, 0x01	; 1
     af4:	e2 17       	cp	r30, r18
     af6:	f3 07       	cpc	r31, r19
     af8:	21 f0       	breq	.+8      	; 0xb02 <Set_Pass+0x108>
	{
		x = 1 ;
		for( ; j > 1 ; --j){
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	80 f7       	brcc	.-32     	; 0xade <Set_Pass+0xe4>
     afe:	46 2f       	mov	r20, r22
     b00:	f3 cf       	rjmp	.-26     	; 0xae8 <Set_Pass+0xee>
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
	while(PTR_COUNT->keypad_count < HALF_SEC);
	
	//_delay_ms(250);	/* DELAY	*/
	EEPROM_vWrite(Password_inFun(Pw_ptr) , admin_addrs);
     b02:	60 e1       	ldi	r22, 0x10	; 16
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <EEPROM_vWrite>
}
     b0a:	61 96       	adiw	r28, 0x11	; 17
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	08 95       	ret
			/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
			PTR_COUNT->keypad_count = 0;
			while(PTR_COUNT->keypad_count < Q_SEC);
		}
		
		LCD_vMOVECur(2 , x+1);
     b26:	6f 2d       	mov	r22, r15
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
		LCD_vsenddata('*');
     b30:	8a e2       	ldi	r24, 0x2A	; 42
     b32:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
     b36:	be cf       	rjmp	.-132    	; 0xab4 <Set_Pass+0xba>

00000b38 <Access_Display1>:


/*	DISPLAY FIRST ACCESS TO ROOM 1 AND ROOM 2	*/

char Access_Display1()
{
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	6a 97       	sbiw	r28, 0x1a	; 26
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "(0)Room1" ;
     b52:	de 01       	movw	r26, r28
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	e3 ec       	ldi	r30, 0xC3	; 195
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	89 e0       	ldi	r24, 0x09	; 9
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	e1 f7       	brne	.-8      	; 0xb5c <Access_Display1+0x24>
	char arr1[] = "(1)Room2";
     b64:	de 01       	movw	r26, r28
     b66:	1a 96       	adiw	r26, 0x0a	; 10
     b68:	ec ec       	ldi	r30, 0xCC	; 204
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	89 e0       	ldi	r24, 0x09	; 9
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	81 50       	subi	r24, 0x01	; 1
     b74:	e1 f7       	brne	.-8      	; 0xb6e <Access_Display1+0x36>
	char arr2[] = "(-)Next";
     b76:	de 01       	movw	r26, r28
     b78:	53 96       	adiw	r26, 0x13	; 19
     b7a:	e5 ed       	ldi	r30, 0xD5	; 213
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	01 90       	ld	r0, Z+
     b82:	0d 92       	st	X+, r0
     b84:	81 50       	subi	r24, 0x01	; 1
     b86:	e1 f7       	brne	.-8      	; 0xb80 <Access_Display1+0x48>
	char *ptr2 = arr2 ;
	
	char key ;
	
	/* Just the shape of Displaying	*/
	LCD_vSendCmd(0x01);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr0);
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1,10);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	6a e0       	ldi	r22, 0x0A	; 10
     b9a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
     b9e:	ce 01       	movw	r24, r28
     ba0:	0a 96       	adiw	r24, 0x0a	; 10
     ba2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
     bae:	ce 01       	movw	r24, r28
     bb0:	43 96       	adiw	r24, 0x13	; 19
     bb2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,8);
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 or 2 */
	/* Wait until a key pressed */
	while( KEYPAD_u8SCAN() == NoScan);	
     bbe:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     bc2:	8f 3f       	cpi	r24, 0xFF	; 255
     bc4:	e1 f3       	breq	.-8      	; 0xbbe <Access_Display1+0x86>
	key =  KEYPAD_u8SCAN();
     bc6:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     bca:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     bcc:	e0 91 7b 01 	lds	r30, 0x017B
     bd0:	f0 91 7c 01 	lds	r31, 0x017C
     bd4:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
     bd6:	00 91 7b 01 	lds	r16, 0x017B
     bda:	10 91 7c 01 	lds	r17, 0x017C
     bde:	f8 01       	movw	r30, r16
     be0:	60 81       	ld	r22, Z
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	48 ec       	ldi	r20, 0xC8	; 200
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	8c f3       	brlt	.-30     	; 0xbde <Access_Display1+0xa6>
	

	return key ;
}
     bfc:	8f 2d       	mov	r24, r15
     bfe:	6a 96       	adiw	r28, 0x1a	; 26
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	08 95       	ret

00000c16 <Access_Display2>:


/* DISPLAY SECOND ACCESS TO ROOM 3 , TV AND AIRCONDTION	*/

char Access_Display2()
{
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	6e 97       	sbiw	r28, 0x1e	; 30
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "(2)Room3" ;
     c30:	de 01       	movw	r26, r28
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	ed ed       	ldi	r30, 0xDD	; 221
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	89 e0       	ldi	r24, 0x09	; 9
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	81 50       	subi	r24, 0x01	; 1
     c40:	e1 f7       	brne	.-8      	; 0xc3a <Access_Display2+0x24>
	char arr1[] = "(3)TV";
     c42:	de 01       	movw	r26, r28
     c44:	1a 96       	adiw	r26, 0x0a	; 10
     c46:	e6 ee       	ldi	r30, 0xE6	; 230
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	86 e0       	ldi	r24, 0x06	; 6
     c4c:	01 90       	ld	r0, Z+
     c4e:	0d 92       	st	X+, r0
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	e1 f7       	brne	.-8      	; 0xc4c <Access_Display2+0x36>
	char arr2[] = "(4)AirCondtion";
     c54:	de 01       	movw	r26, r28
     c56:	50 96       	adiw	r26, 0x10	; 16
     c58:	ec ee       	ldi	r30, 0xEC	; 236
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	8f e0       	ldi	r24, 0x0F	; 15
     c5e:	01 90       	ld	r0, Z+
     c60:	0d 92       	st	X+, r0
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	e1 f7       	brne	.-8      	; 0xc5e <Access_Display2+0x48>
	
	char key ;

	/* Just the shape of Displaying	*/
	
	LCD_vSendCmd(0x01);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr0);
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1,10);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	6a e0       	ldi	r22, 0x0A	; 10
     c78:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
     c7c:	ce 01       	movw	r24, r28
     c7e:	0a 96       	adiw	r24, 0x0a	; 10
     c80:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
     c8c:	ce 01       	movw	r24, r28
     c8e:	40 96       	adiw	r24, 0x10	; 16
     c90:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,14);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	6e e0       	ldi	r22, 0x0E	; 14
     c98:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 or 2 */
	/* Wait untill a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);	
     c9c:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     ca0:	8f 3f       	cpi	r24, 0xFF	; 255
     ca2:	e1 f3       	breq	.-8      	; 0xc9c <Access_Display2+0x86>
	key = KEYPAD_u8SCAN();
     ca4:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     ca8:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     caa:	e0 91 7b 01 	lds	r30, 0x017B
     cae:	f0 91 7c 01 	lds	r31, 0x017C
     cb2:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
     cb4:	00 91 7b 01 	lds	r16, 0x017B
     cb8:	10 91 7c 01 	lds	r17, 0x017C
     cbc:	f8 01       	movw	r30, r16
     cbe:	60 81       	ld	r22, Z
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	48 ec       	ldi	r20, 0xC8	; 200
     cd0:	51 e4       	ldi	r21, 0x41	; 65
     cd2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	8c f3       	brlt	.-30     	; 0xcbc <Access_Display2+0xa6>
	
	return key ;
}
     cda:	8f 2d       	mov	r24, r15
     cdc:	6e 96       	adiw	r28, 0x1e	; 30
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	08 95       	ret

00000cf4 <Rooms_Access_Display>:


/* DISPLAYING WHICH ROOM USER ACCESSING AT THE MOMENT */

char Rooms_Access_Display(char RoomNumber)
{
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	a7 97       	sbiw	r28, 0x27	; 39
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "ROOM 1" ;
     d0e:	de 01       	movw	r26, r28
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	eb ef       	ldi	r30, 0xFB	; 251
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	97 e0       	ldi	r25, 0x07	; 7
     d18:	01 90       	ld	r0, Z+
     d1a:	0d 92       	st	X+, r0
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <Rooms_Access_Display+0x24>
	char arr1[] = "(=)Menu";
     d20:	fe 01       	movw	r30, r28
     d22:	38 96       	adiw	r30, 0x08	; 8
     d24:	a2 e0       	ldi	r26, 0x02	; 2
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	98 e0       	ldi	r25, 0x08	; 8
     d2a:	0d 90       	ld	r0, X+
     d2c:	01 92       	st	Z+, r0
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	e1 f7       	brne	.-8      	; 0xd2a <Rooms_Access_Display+0x36>
	char arr2[] = "(*)Logout";
     d32:	fe 01       	movw	r30, r28
     d34:	70 96       	adiw	r30, 0x10	; 16
     d36:	aa e0       	ldi	r26, 0x0A	; 10
     d38:	b1 e0       	ldi	r27, 0x01	; 1
     d3a:	9a e0       	ldi	r25, 0x0A	; 10
     d3c:	0d 90       	ld	r0, X+
     d3e:	01 92       	st	Z+, r0
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	e1 f7       	brne	.-8      	; 0xd3c <Rooms_Access_Display+0x48>
	char arr3[] = "ROOM 2" ;
     d44:	fe 01       	movw	r30, r28
     d46:	7a 96       	adiw	r30, 0x1a	; 26
     d48:	a4 e1       	ldi	r26, 0x14	; 20
     d4a:	b1 e0       	ldi	r27, 0x01	; 1
     d4c:	97 e0       	ldi	r25, 0x07	; 7
     d4e:	0d 90       	ld	r0, X+
     d50:	01 92       	st	Z+, r0
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	e1 f7       	brne	.-8      	; 0xd4e <Rooms_Access_Display+0x5a>
	char arr4[] = "ROOM 3" ;
     d56:	fe 01       	movw	r30, r28
     d58:	b1 96       	adiw	r30, 0x21	; 33
     d5a:	ab e1       	ldi	r26, 0x1B	; 27
     d5c:	b1 e0       	ldi	r27, 0x01	; 1
     d5e:	97 e0       	ldi	r25, 0x07	; 7
     d60:	0d 90       	ld	r0, X+
     d62:	01 92       	st	Z+, r0
     d64:	91 50       	subi	r25, 0x01	; 1
     d66:	e1 f7       	brne	.-8      	; 0xd60 <Rooms_Access_Display+0x6c>
	char *ptr2 = arr2 ;
	
	char key;
	
	/* Just the shape of Displaying	*/
	switch(RoomNumber)
     d68:	81 33       	cpi	r24, 0x31	; 49
     d6a:	29 f0       	breq	.+10     	; 0xd76 <Rooms_Access_Display+0x82>
     d6c:	82 33       	cpi	r24, 0x32	; 50
     d6e:	39 f0       	breq	.+14     	; 0xd7e <Rooms_Access_Display+0x8a>
     d70:	80 33       	cpi	r24, 0x30	; 48
     d72:	61 f4       	brne	.+24     	; 0xd8c <Rooms_Access_Display+0x98>
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <Rooms_Access_Display+0x92>
		case ROOM1 :
		ptr0 = arr0 ;
		break ;
		
		case ROOM2 :
		ptr0 = arr3 ;
     d76:	8e 01       	movw	r16, r28
     d78:	06 5e       	subi	r16, 0xE6	; 230
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
		break ;
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <Rooms_Access_Display+0x98>
		
		case ROOM3 :
		ptr0 = arr4 ;
     d7e:	8e 01       	movw	r16, r28
     d80:	0f 5d       	subi	r16, 0xDF	; 223
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
		break ;
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <Rooms_Access_Display+0x98>
	
	/* Just the shape of Displaying	*/
	switch(RoomNumber)
	{
		case ROOM1 :
		ptr0 = arr0 ;
     d86:	8e 01       	movw	r16, r28
     d88:	0f 5f       	subi	r16, 0xFF	; 255
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
		case ROOM3 :
		ptr0 = arr4 ;
		break ;
	}
	
	LCD_vSendCmd(0x01);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vMOVECur(1,6);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	66 e0       	ldi	r22, 0x06	; 6
     d96:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	LCD_vSDD(ptr0);
     d9a:	c8 01       	movw	r24, r16
     d9c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
     da8:	ce 01       	movw	r24, r28
     daa:	08 96       	adiw	r24, 0x08	; 8
     dac:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,8);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	68 e0       	ldi	r22, 0x08	; 8
     db4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
     db8:	ce 01       	movw	r24, r28
     dba:	40 96       	adiw	r24, 0x10	; 16
     dbc:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,16);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	60 e1       	ldi	r22, 0x10	; 16
     dc4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 */
	/* Wait until a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);	
     dc8:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     dcc:	8f 3f       	cpi	r24, 0xFF	; 255
     dce:	e1 f3       	breq	.-8      	; 0xdc8 <Rooms_Access_Display+0xd4>
	key =KEYPAD_u8SCAN();
     dd0:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     dd4:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     dd6:	e0 91 7b 01 	lds	r30, 0x017B
     dda:	f0 91 7c 01 	lds	r31, 0x017C
     dde:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
     de0:	00 91 7b 01 	lds	r16, 0x017B
     de4:	10 91 7c 01 	lds	r17, 0x017C
     de8:	f8 01       	movw	r30, r16
     dea:	60 81       	ld	r22, Z
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	48 ec       	ldi	r20, 0xC8	; 200
     dfc:	51 e4       	ldi	r21, 0x41	; 65
     dfe:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     e02:	88 23       	and	r24, r24
     e04:	8c f3       	brlt	.-30     	; 0xde8 <Rooms_Access_Display+0xf4>
	
	//_delay_ms(250);
	if(key == MENU)
     e06:	fd e3       	ldi	r31, 0x3D	; 61
     e08:	ff 16       	cp	r15, r31
     e0a:	21 f0       	breq	.+8      	; 0xe14 <Rooms_Access_Display+0x120>
	{
		return HIGH ;
	}
	else if(key == LOUT)
     e0c:	8a e2       	ldi	r24, 0x2A	; 42
     e0e:	f8 16       	cp	r15, r24
     e10:	19 f0       	breq	.+6      	; 0xe18 <Rooms_Access_Display+0x124>
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <Rooms_Access_Display+0x126>
	while(PTR_COUNT->keypad_count < Q_SEC);
	
	//_delay_ms(250);
	if(key == MENU)
	{
		return HIGH ;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <Rooms_Access_Display+0x126>
	}
	else if(key == LOUT)
	{
		return LOW ;
     e18:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e1a:	a7 96       	adiw	r28, 0x27	; 39
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	08 95       	ret

00000e32 <TVM>:


/* DISPLAY OF TV ON OR OFF CHOICES	*/

void TVM()
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	68 97       	sbiw	r28, 0x18	; 24
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "1:TV ON";
     e46:	de 01       	movw	r26, r28
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	e2 e2       	ldi	r30, 0x22	; 34
     e4c:	f1 e0       	ldi	r31, 0x01	; 1
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	01 90       	ld	r0, Z+
     e52:	0d 92       	st	X+, r0
     e54:	81 50       	subi	r24, 0x01	; 1
     e56:	e1 f7       	brne	.-8      	; 0xe50 <TVM+0x1e>
	char arr1[] = "2:TV OFF";
     e58:	de 01       	movw	r26, r28
     e5a:	19 96       	adiw	r26, 0x09	; 9
     e5c:	ea e2       	ldi	r30, 0x2A	; 42
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	89 e0       	ldi	r24, 0x09	; 9
     e62:	01 90       	ld	r0, Z+
     e64:	0d 92       	st	X+, r0
     e66:	81 50       	subi	r24, 0x01	; 1
     e68:	e1 f7       	brne	.-8      	; 0xe62 <TVM+0x30>
	char arr2[] = "0:Menu";
     e6a:	de 01       	movw	r26, r28
     e6c:	52 96       	adiw	r26, 0x12	; 18
     e6e:	e3 e3       	ldi	r30, 0x33	; 51
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	87 e0       	ldi	r24, 0x07	; 7
     e74:	01 90       	ld	r0, Z+
     e76:	0d 92       	st	X+, r0
     e78:	81 50       	subi	r24, 0x01	; 1
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <TVM+0x42>
	char *ptr1 = arr1 ;
	char *ptr2 = arr2 ;
	
	
	
	LCD_vSendCmd(0x01);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr2);
     e82:	ce 01       	movw	r24, r28
     e84:	42 96       	adiw	r24, 0x12	; 18
     e86:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1,2);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	62 e0       	ldi	r22, 0x02	; 2
     e8e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr0);
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2 ,9);
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	69 e0       	ldi	r22, 0x09	; 9
     e9e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>

	LCD_vSDD(ptr1);
     ea2:	ce 01       	movw	r24, r28
     ea4:	09 96       	adiw	r24, 0x09	; 9
     ea6:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1,8);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	68 e0       	ldi	r22, 0x08	; 8
     eae:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
}
     eb2:	68 96       	adiw	r28, 0x18	; 24
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <TV_ON_OFF>:


/* ASKING IF USER WANTS TV ON OR OFF	*/

char TV_ON_OFF(){
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
	TVM();
     eca:	0e 94 19 07 	call	0xe32	; 0xe32 <TVM>
	char key ;
	
	
	/* take from keypad 0 or 1 */
	/* Wait until a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);	
     ece:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     ed2:	8f 3f       	cpi	r24, 0xFF	; 255
     ed4:	e1 f3       	breq	.-8      	; 0xece <TV_ON_OFF+0xa>
	key = KEYPAD_u8SCAN();
     ed6:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     eda:	18 2f       	mov	r17, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     edc:	e0 91 7b 01 	lds	r30, 0x017B
     ee0:	f0 91 7c 01 	lds	r31, 0x017C
     ee4:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
     ee6:	c0 91 7b 01 	lds	r28, 0x017B
     eea:	d0 91 7c 01 	lds	r29, 0x017C
     eee:	68 81       	ld	r22, Y
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 ec       	ldi	r20, 0xC8	; 200
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     f06:	88 23       	and	r24, r24
     f08:	94 f3       	brlt	.-28     	; 0xeee <TV_ON_OFF+0x2a>
	

	if(key == K_ON){
     f0a:	11 33       	cpi	r17, 0x31	; 49
     f0c:	29 f0       	breq	.+10     	; 0xf18 <TV_ON_OFF+0x54>
		return ON ;
	}
	else if(key == K_OFF){
     f0e:	10 33       	cpi	r17, 0x30	; 48
     f10:	29 f0       	breq	.+10     	; 0xf1c <TV_ON_OFF+0x58>
		return OFF ;
	}
	else if(key == MENU){
     f12:	1d 33       	cpi	r17, 0x3D	; 61
     f14:	29 f0       	breq	.+10     	; 0xf20 <TV_ON_OFF+0x5c>
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <TV_ON_OFF+0x5e>
	PTR_COUNT->keypad_count = 0;
	while(PTR_COUNT->keypad_count < Q_SEC);
	

	if(key == K_ON){
		return ON ;
     f18:	81 e3       	ldi	r24, 0x31	; 49
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <TV_ON_OFF+0x5e>
	}
	else if(key == K_OFF){
		return OFF ;
     f1c:	80 e3       	ldi	r24, 0x30	; 48
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <TV_ON_OFF+0x5e>
	}
	else if(key == MENU){
		return MENU ;
     f20:	8d e3       	ldi	r24, 0x3D	; 61
	}
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	08 95       	ret

00000f2a <TV_Access>:

/* DISPLAY OF TV ACCESSING SCREEN	*/

char TV_Access()
{
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	68 97       	sbiw	r28, 0x18	; 24
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "TV ON";
     f44:	de 01       	movw	r26, r28
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	ea e3       	ldi	r30, 0x3A	; 58
     f4a:	f1 e0       	ldi	r31, 0x01	; 1
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	01 90       	ld	r0, Z+
     f50:	0d 92       	st	X+, r0
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	e1 f7       	brne	.-8      	; 0xf4e <TV_Access+0x24>
	char arr1[] = "(=)Menu";
     f56:	de 01       	movw	r26, r28
     f58:	17 96       	adiw	r26, 0x07	; 7
     f5a:	e2 e0       	ldi	r30, 0x02	; 2
     f5c:	f1 e0       	ldi	r31, 0x01	; 1
     f5e:	88 e0       	ldi	r24, 0x08	; 8
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	e1 f7       	brne	.-8      	; 0xf60 <TV_Access+0x36>
	char arr2[] = "(*)Logout" ;
     f68:	de 01       	movw	r26, r28
     f6a:	1f 96       	adiw	r26, 0x0f	; 15
     f6c:	ea e0       	ldi	r30, 0x0A	; 10
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	8a e0       	ldi	r24, 0x0A	; 10
     f72:	01 90       	ld	r0, Z+
     f74:	0d 92       	st	X+, r0
     f76:	81 50       	subi	r24, 0x01	; 1
     f78:	e1 f7       	brne	.-8      	; 0xf72 <TV_Access+0x48>
	char *ptr0 = arr0 ;
	char *ptr1 = arr1 ;
	char *ptr2 = arr2 ;
	char key ;

	LCD_vSendCmd(0x01);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vMOVECur(6 , 1);
     f80:	86 e0       	ldi	r24, 0x06	; 6
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	LCD_vSDD(ptr0);
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
     f98:	ce 01       	movw	r24, r28
     f9a:	07 96       	adiw	r24, 0x07	; 7
     f9c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,8);
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	68 e0       	ldi	r22, 0x08	; 8
     fa4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
     fa8:	ce 01       	movw	r24, r28
     faa:	0f 96       	adiw	r24, 0x0f	; 15
     fac:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,16);
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	60 e1       	ldi	r22, 0x10	; 16
     fb4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 */
	/* Wait untill a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);	
     fb8:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	e1 f3       	breq	.-8      	; 0xfb8 <TV_Access+0x8e>
	key = KEYPAD_u8SCAN();
     fc0:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
     fc4:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
     fc6:	e0 91 7b 01 	lds	r30, 0x017B
     fca:	f0 91 7c 01 	lds	r31, 0x017C
     fce:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
     fd0:	00 91 7b 01 	lds	r16, 0x017B
     fd4:	10 91 7c 01 	lds	r17, 0x017C
     fd8:	f8 01       	movw	r30, r16
     fda:	60 81       	ld	r22, Z
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	48 ec       	ldi	r20, 0xC8	; 200
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	8c f3       	brlt	.-30     	; 0xfd8 <TV_Access+0xae>
	
	
	if(key == MENU)
     ff6:	fd e3       	ldi	r31, 0x3D	; 61
     ff8:	ff 16       	cp	r15, r31
     ffa:	21 f0       	breq	.+8      	; 0x1004 <TV_Access+0xda>
	{
		return HIGH ;
	}
	else if(key == LOUT)
     ffc:	8a e2       	ldi	r24, 0x2A	; 42
     ffe:	f8 16       	cp	r15, r24
    1000:	19 f0       	breq	.+6      	; 0x1008 <TV_Access+0xde>
    1002:	03 c0       	rjmp	.+6      	; 0x100a <TV_Access+0xe0>
	while(PTR_COUNT->keypad_count < Q_SEC);
	
	
	if(key == MENU)
	{
		return HIGH ;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	01 c0       	rjmp	.+2      	; 0x100a <TV_Access+0xe0>
	}
	else if(key == LOUT)
	{
		return LOW ;
    1008:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    100a:	68 96       	adiw	r28, 0x18	; 24
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	08 95       	ret

00001022 <AC_disp>:

/* DISPLAY OF AIRCONDTION CHOICES FOR USER TO USE	*/

void AC_disp()
{
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	6b 97       	sbiw	r28, 0x1b	; 27
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "(1)AC ON";
    1036:	de 01       	movw	r26, r28
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	e0 e4       	ldi	r30, 0x40	; 64
    103c:	f1 e0       	ldi	r31, 0x01	; 1
    103e:	89 e0       	ldi	r24, 0x09	; 9
    1040:	01 90       	ld	r0, Z+
    1042:	0d 92       	st	X+, r0
    1044:	81 50       	subi	r24, 0x01	; 1
    1046:	e1 f7       	brne	.-8      	; 0x1040 <AC_disp+0x1e>
	char arr1[] = "(2)AC OFF";
    1048:	de 01       	movw	r26, r28
    104a:	1a 96       	adiw	r26, 0x0a	; 10
    104c:	e9 e4       	ldi	r30, 0x49	; 73
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	8a e0       	ldi	r24, 0x0A	; 10
    1052:	01 90       	ld	r0, Z+
    1054:	0d 92       	st	X+, r0
    1056:	81 50       	subi	r24, 0x01	; 1
    1058:	e1 f7       	brne	.-8      	; 0x1052 <AC_disp+0x30>
	char arr2[] = "(=)Menu";
    105a:	de 01       	movw	r26, r28
    105c:	54 96       	adiw	r26, 0x14	; 20
    105e:	e2 e0       	ldi	r30, 0x02	; 2
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	01 90       	ld	r0, Z+
    1066:	0d 92       	st	X+, r0
    1068:	81 50       	subi	r24, 0x01	; 1
    106a:	e1 f7       	brne	.-8      	; 0x1064 <AC_disp+0x42>
	char *ptr0 = arr0 ;
	char *ptr1 = arr1 ;
	char *ptr2 = arr2 ;
	
	
	LCD_vSendCmd(0x01);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr2);
    1072:	ce 01       	movw	r24, r28
    1074:	44 96       	adiw	r24, 0x14	; 20
    1076:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2 , 1);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr0);
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2 , 9);
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	69 e0       	ldi	r22, 0x09	; 9
    108e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>

	LCD_vSDD(ptr1);
    1092:	ce 01       	movw	r24, r28
    1094:	0a 96       	adiw	r24, 0x0a	; 10
    1096:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1 , 8);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	68 e0       	ldi	r22, 0x08	; 8
    109e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
}
    10a2:	6b 96       	adiw	r28, 0x1b	; 27
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <AC_On>:

/* CHOOSING WHICH FEATURE IN AIRCONDTION YOU WANNA USE	*/

char AC_On()
{
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	AC_disp();
    10ba:	0e 94 11 08 	call	0x1022	; 0x1022 <AC_disp>
	char key ;

	
	/* take from keypad 0 or 1 */
	/* Wait until a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);	
    10be:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	e1 f3       	breq	.-8      	; 0x10be <AC_On+0xa>
	key = KEYPAD_u8SCAN();
    10c6:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    10ca:	18 2f       	mov	r17, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
    10cc:	e0 91 7b 01 	lds	r30, 0x017B
    10d0:	f0 91 7c 01 	lds	r31, 0x017C
    10d4:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
    10d6:	c0 91 7b 01 	lds	r28, 0x017B
    10da:	d0 91 7c 01 	lds	r29, 0x017C
    10de:	68 81       	ld	r22, Y
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	48 ec       	ldi	r20, 0xC8	; 200
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	94 f3       	brlt	.-28     	; 0x10de <AC_On+0x2a>
	
	//_delay_ms(250);
	if(key == K_ON)
    10fa:	11 33       	cpi	r17, 0x31	; 49
    10fc:	29 f0       	breq	.+10     	; 0x1108 <AC_On+0x54>
	{
		return ON ;
	}
	else if(key == K_OFF)
    10fe:	10 33       	cpi	r17, 0x30	; 48
    1100:	29 f0       	breq	.+10     	; 0x110c <AC_On+0x58>
	{
		return OFF ;
	}
	else if(key == MENU)
    1102:	1d 33       	cpi	r17, 0x3D	; 61
    1104:	29 f0       	breq	.+10     	; 0x1110 <AC_On+0x5c>
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <AC_On+0x5e>
	while(PTR_COUNT->keypad_count < Q_SEC);
	
	//_delay_ms(250);
	if(key == K_ON)
	{
		return ON ;
    1108:	81 e3       	ldi	r24, 0x31	; 49
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <AC_On+0x5e>
	}
	else if(key == K_OFF)
	{
		return OFF ;
    110c:	80 e3       	ldi	r24, 0x30	; 48
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <AC_On+0x5e>
	}
	else if(key == MENU)
	{
		return MENU ;
    1110:	8d e3       	ldi	r24, 0x3D	; 61
	}
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	08 95       	ret

0000111a <AC_Access>:

char AC_Access()
{
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	68 97       	sbiw	r28, 0x18	; 24
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "AC ON";
    1134:	de 01       	movw	r26, r28
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	01 90       	ld	r0, Z+
    1140:	0d 92       	st	X+, r0
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	e1 f7       	brne	.-8      	; 0x113e <AC_Access+0x24>
	char arr1[] = "(=)Menu";
    1146:	de 01       	movw	r26, r28
    1148:	17 96       	adiw	r26, 0x07	; 7
    114a:	e2 e0       	ldi	r30, 0x02	; 2
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	88 e0       	ldi	r24, 0x08	; 8
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	81 50       	subi	r24, 0x01	; 1
    1156:	e1 f7       	brne	.-8      	; 0x1150 <AC_Access+0x36>
	char arr2[] = "(*)Logout" ;
    1158:	de 01       	movw	r26, r28
    115a:	1f 96       	adiw	r26, 0x0f	; 15
    115c:	ea e0       	ldi	r30, 0x0A	; 10
    115e:	f1 e0       	ldi	r31, 0x01	; 1
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	01 90       	ld	r0, Z+
    1164:	0d 92       	st	X+, r0
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	e1 f7       	brne	.-8      	; 0x1162 <AC_Access+0x48>
	char *ptr0 = arr0 ;
	char *ptr1 = arr1 ;
	char *ptr2 = arr2 ;
	char key;
	
	LCD_vSendCmd(0x01);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vMOVECur(1,6);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	66 e0       	ldi	r22, 0x06	; 6
    1174:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	LCD_vSDD(ptr0);
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
    1188:	ce 01       	movw	r24, r28
    118a:	07 96       	adiw	r24, 0x07	; 7
    118c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,8);
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	68 e0       	ldi	r22, 0x08	; 8
    1194:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
    1198:	ce 01       	movw	r24, r28
    119a:	0f 96       	adiw	r24, 0x0f	; 15
    119c:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,16);
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	60 e1       	ldi	r22, 0x10	; 16
    11a4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 */
	while(KEYPAD_u8SCAN() == NoScan);	/* Wait untill a key pressed */
    11a8:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    11ac:	8f 3f       	cpi	r24, 0xFF	; 255
    11ae:	e1 f3       	breq	.-8      	; 0x11a8 <AC_Access+0x8e>
	key= KEYPAD_u8SCAN();
    11b0:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    11b4:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
    11b6:	e0 91 7b 01 	lds	r30, 0x017B
    11ba:	f0 91 7c 01 	lds	r31, 0x017C
    11be:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
    11c0:	00 91 7b 01 	lds	r16, 0x017B
    11c4:	10 91 7c 01 	lds	r17, 0x017C
    11c8:	f8 01       	movw	r30, r16
    11ca:	60 81       	ld	r22, Z
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	48 ec       	ldi	r20, 0xC8	; 200
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	8c f3       	brlt	.-30     	; 0x11c8 <AC_Access+0xae>
	

	if(key == MENU){
    11e6:	fd e3       	ldi	r31, 0x3D	; 61
    11e8:	ff 16       	cp	r15, r31
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <AC_Access+0xda>
		return HIGH ;
	}
	else if(key == LOUT){
    11ec:	8a e2       	ldi	r24, 0x2A	; 42
    11ee:	f8 16       	cp	r15, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <AC_Access+0xde>
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <AC_Access+0xe0>
	PTR_COUNT->keypad_count = 0;
	while(PTR_COUNT->keypad_count < Q_SEC);
	

	if(key == MENU){
		return HIGH ;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <AC_Access+0xe0>
	}
	else if(key == LOUT){
		return LOW ;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    11fa:	68 96       	adiw	r28, 0x18	; 24
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	08 95       	ret

00001212 <AC_TEMP_SET>:


/* SETTING TEMPERATURE OF AIRCONDTION	*/
void AC_TEMP_SET()
{
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2d 97       	sbiw	r28, 0x0d	; 13
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "Enter Degree";
    1226:	de 01       	movw	r26, r28
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	e9 e5       	ldi	r30, 0x59	; 89
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	8d e0       	ldi	r24, 0x0D	; 13
    1230:	01 90       	ld	r0, Z+
    1232:	0d 92       	st	X+, r0
    1234:	81 50       	subi	r24, 0x01	; 1
    1236:	e1 f7       	brne	.-8      	; 0x1230 <AC_TEMP_SET+0x1e>
	char *ptr0 = arr0 ;
	
	
	LCD_vSendCmd(0x01);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr0);
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
}
    124e:	2d 96       	adiw	r28, 0x0d	; 13
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <AC_TEMP_Degree>:

/* GETTING DESIRED TEMPERATURE FROM USER	*/

char * AC_TEMP_Degree(void)
{
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <AC_TEMP_Degree+0x12>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	AC_TEMP_SET();
    1276:	0e 94 09 09 	call	0x1212	; 0x1212 <AC_TEMP_SET>
    127a:	7e 01       	movw	r14, r28
    127c:	08 94       	sec
    127e:	e1 1c       	adc	r14, r1
    1280:	f1 1c       	adc	r15, r1
	
}

/* GETTING DESIRED TEMPERATURE FROM USER	*/

char * AC_TEMP_Degree(void)
    1282:	0f 2e       	mov	r0, r31
    1284:	f3 e0       	ldi	r31, 0x03	; 3
    1286:	cf 2e       	mov	r12, r31
    1288:	dd 24       	eor	r13, r13
    128a:	f0 2d       	mov	r31, r0
    128c:	cc 0e       	add	r12, r28
    128e:	dd 1e       	adc	r13, r29
	char *degree_ptr = temp ;
	char x;
	
	
	for(x = 0 ; x < 2 ; ++x){
		while(KEYPAD_u8SCAN() == NoScan);
    1290:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    1294:	8f 3f       	cpi	r24, 0xFF	; 255
    1296:	e1 f3       	breq	.-8      	; 0x1290 <AC_TEMP_Degree+0x30>
		
		temp[x] = KEYPAD_u8SCAN() ;
    1298:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    129c:	f7 01       	movw	r30, r14
    129e:	81 93       	st	Z+, r24
    12a0:	7f 01       	movw	r14, r30
		LCD_vsenddata( temp[x] );
    12a2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
		
		PTR_COUNT->keypad_count = 0;
    12a6:	e0 91 7b 01 	lds	r30, 0x017B
    12aa:	f0 91 7c 01 	lds	r31, 0x017C
    12ae:	10 82       	st	Z, r1
		while(PTR_COUNT->keypad_count < Q_SEC);
    12b0:	00 91 7b 01 	lds	r16, 0x017B
    12b4:	10 91 7c 01 	lds	r17, 0x017C
    12b8:	f8 01       	movw	r30, r16
    12ba:	60 81       	ld	r22, Z
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	48 ec       	ldi	r20, 0xC8	; 200
    12cc:	51 e4       	ldi	r21, 0x41	; 65
    12ce:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	8c f3       	brlt	.-30     	; 0x12b8 <AC_TEMP_Degree+0x58>
	char temp[2] ;
	char *degree_ptr = temp ;
	char x;
	
	
	for(x = 0 ; x < 2 ; ++x){
    12d6:	ec 14       	cp	r14, r12
    12d8:	fd 04       	cpc	r15, r13
    12da:	d1 f6       	brne	.-76     	; 0x1290 <AC_TEMP_Degree+0x30>
		LCD_vsenddata( temp[x] );
		
		PTR_COUNT->keypad_count = 0;
		while(PTR_COUNT->keypad_count < Q_SEC);
	}
	while(KEYPAD_u8SCAN() != ENTER);
    12dc:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    12e0:	8b 32       	cpi	r24, 0x2B	; 43
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <AC_TEMP_Degree+0x7c>
	
	PTR_COUNT->keypad_count = 0;
    12e4:	e0 91 7b 01 	lds	r30, 0x017B
    12e8:	f0 91 7c 01 	lds	r31, 0x017C
    12ec:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
    12ee:	00 91 7b 01 	lds	r16, 0x017B
    12f2:	10 91 7c 01 	lds	r17, 0x017C
    12f6:	f8 01       	movw	r30, r16
    12f8:	60 81       	ld	r22, Z
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	48 ec       	ldi	r20, 0xC8	; 200
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
    1310:	88 23       	and	r24, r24
    1312:	8c f3       	brlt	.-30     	; 0x12f6 <AC_TEMP_Degree+0x96>

	return degree_ptr ;
}
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	08 95       	ret

0000132e <AC_Degree>:

/* CONVERT TEMPERATURE SO THAT ADC CAN HANDLE IT	*/

char AC_Degree(char *degree_ptr)
{
    132e:	fc 01       	movw	r30, r24
	char Degree ;
	
	Degree = ( ((*(degree_ptr + 0)) - ('0') ) * 10 ) + ( (*(degree_ptr+1)) - ('0') ) ;
    1330:	81 81       	ldd	r24, Z+1	; 0x01
    1332:	80 51       	subi	r24, 0x10	; 16
    1334:	90 81       	ld	r25, Z
    1336:	99 0f       	add	r25, r25
    1338:	29 2f       	mov	r18, r25
    133a:	22 0f       	add	r18, r18
    133c:	22 0f       	add	r18, r18
    133e:	92 0f       	add	r25, r18
	
	return Degree ;
}
    1340:	89 0f       	add	r24, r25
    1342:	08 95       	ret

00001344 <Guest_Pass>:


/* GETTING GUEST PASSWORD	*/
char Guest_Pass (char * pw_ptr)
{
    1344:	fc 01       	movw	r30, r24
	char pass = 0 ;
	pass = ( (*(pw_ptr+0)) - ('0') ) + ( (*(pw_ptr+1)) - ('0') ) + ( (*(pw_ptr+2)) - ('0') ) + ( (*(pw_ptr+3)) - ('0') ) ;
    1346:	90 81       	ld	r25, Z
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	89 0f       	add	r24, r25
    134c:	80 5c       	subi	r24, 0xC0	; 192
    134e:	92 81       	ldd	r25, Z+2	; 0x02
    1350:	89 0f       	add	r24, r25
    1352:	93 81       	ldd	r25, Z+3	; 0x03
	
	return pass ;
}
    1354:	89 0f       	add	r24, r25
    1356:	08 95       	ret

00001358 <Chk_Guest_Pass>:


/* CHECK GUEST PASSWORD	*/

char Chk_Guest_Pass (void)
{
    1358:	cf 93       	push	r28
	char Pass = Guest_Pass(LCD_PassDis1());
    135a:	0e 94 28 03 	call	0x650	; 0x650 <LCD_PassDis1>
    135e:	0e 94 a2 09 	call	0x1344	; 0x1344 <Guest_Pass>
    1362:	c8 2f       	mov	r28, r24
	
	if(Pass == EEPROM_vRead(GUEST_addrs))
    1364:	80 e4       	ldi	r24, 0x40	; 64
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <EEPROM_vRead>
	{
		return HIGH ;
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	c8 13       	cpse	r28, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return LOW ;
	}
}
    1372:	89 2f       	mov	r24, r25
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <Guest_Access_Display>:


/* DISPLAY FIRST ACCESS OF ROOM 1 , 2 AND 3	 .. THE ONLY ACCESSABLE FEATURES FOR GUEST	*/

char Guest_Access_Display (void)
{
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	6b 97       	sbiw	r28, 0x1b	; 27
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
	char arr0[] = "(0)Room1" ;
    1392:	de 01       	movw	r26, r28
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	e3 ec       	ldi	r30, 0xC3	; 195
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	89 e0       	ldi	r24, 0x09	; 9
    139c:	01 90       	ld	r0, Z+
    139e:	0d 92       	st	X+, r0
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	e1 f7       	brne	.-8      	; 0x139c <Guest_Access_Display+0x24>
	char arr1[] = "(1)Room2";
    13a4:	de 01       	movw	r26, r28
    13a6:	1a 96       	adiw	r26, 0x0a	; 10
    13a8:	ec ec       	ldi	r30, 0xCC	; 204
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	89 e0       	ldi	r24, 0x09	; 9
    13ae:	01 90       	ld	r0, Z+
    13b0:	0d 92       	st	X+, r0
    13b2:	81 50       	subi	r24, 0x01	; 1
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <Guest_Access_Display+0x36>
	char arr2[] = "(2)Room3";
    13b6:	de 01       	movw	r26, r28
    13b8:	53 96       	adiw	r26, 0x13	; 19
    13ba:	ed ed       	ldi	r30, 0xDD	; 221
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	89 e0       	ldi	r24, 0x09	; 9
    13c0:	01 90       	ld	r0, Z+
    13c2:	0d 92       	st	X+, r0
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <Guest_Access_Display+0x48>
	
	char key ;
	
	/* Just the shape of Displaying	*/
	
	LCD_vSendCmd(0x01);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	LCD_vSDD(ptr0);
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(1, 10);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	6a e0       	ldi	r22, 0x0A	; 10
    13da:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr1);
    13de:	ce 01       	movw	r24, r28
    13e0:	0a 96       	adiw	r24, 0x0a	; 10
    13e2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,1);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	LCD_vSDD(ptr2);
    13ee:	ce 01       	movw	r24, r28
    13f0:	43 96       	adiw	r24, 0x13	; 19
    13f2:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_vSDD>
	LCD_vMOVECur(2,8);
    13f6:	82 e0       	ldi	r24, 0x02	; 2
    13f8:	68 e0       	ldi	r22, 0x08	; 8
    13fa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_vMOVECur>
	
	/* take from keypad 0 or 1 or 2 */
	/* Wait untill a key pressed */
	while(KEYPAD_u8SCAN() == NoScan);
    13fe:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	e1 f3       	breq	.-8      	; 0x13fe <Guest_Access_Display+0x86>
	key = KEYPAD_u8SCAN();
    1406:	0e 94 ed 0a 	call	0x15da	; 0x15da <KEYPAD_u8SCAN>
    140a:	f8 2e       	mov	r15, r24
	
	/*	THIS DELAY TO NOT INTERFERE WITH THE ACCESS FUNCTION	*/
	PTR_COUNT->keypad_count = 0;
    140c:	e0 91 7b 01 	lds	r30, 0x017B
    1410:	f0 91 7c 01 	lds	r31, 0x017C
    1414:	10 82       	st	Z, r1
	while(PTR_COUNT->keypad_count < Q_SEC);
    1416:	00 91 7b 01 	lds	r16, 0x017B
    141a:	10 91 7c 01 	lds	r17, 0x017C
    141e:	f8 01       	movw	r30, r16
    1420:	60 81       	ld	r22, Z
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__floatsisf>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	48 ec       	ldi	r20, 0xC8	; 200
    1432:	51 e4       	ldi	r21, 0x41	; 65
    1434:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__cmpsf2>
    1438:	88 23       	and	r24, r24
    143a:	8c f3       	brlt	.-30     	; 0x141e <Guest_Access_Display+0xa6>
	
	//_delay_ms(250);
	return key ;
}
    143c:	8f 2d       	mov	r24, r15
    143e:	6b 96       	adiw	r28, 0x1b	; 27
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	08 95       	ret

00001456 <vTv_ON>:
/*slave functions */



void vTv_ON(){
	SET_BIT(ATR_Port , TV_PIN);
    1456:	a3 9a       	sbi	0x14, 3	; 20
}
    1458:	08 95       	ret

0000145a <vTv_OFF>:

void vTv_OFF(){
	CLR_BIT(ATR_Port , TV_PIN);
    145a:	a3 98       	cbi	0x14, 3	; 20
}
    145c:	08 95       	ret

0000145e <vAirCond_ON>:


void vAirCond_ON(char degree){
	
	if(ptr_option->ADC_read <= (degree * TEMP_SENSOR_FACTOR)){
    145e:	e0 91 79 01 	lds	r30, 0x0179
    1462:	f0 91 7a 01 	lds	r31, 0x017A
    1466:	24 81       	ldd	r18, Z+4	; 0x04
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	82 17       	cp	r24, r18
    1476:	93 07       	cpc	r25, r19
    1478:	14 f0       	brlt	.+4      	; 0x147e <vAirCond_ON+0x20>
		CLR_BIT(ATR_Port , AC_PIN);
    147a:	a4 98       	cbi	0x14, 4	; 20
    147c:	08 95       	ret
	}
	
	else if(ptr_option->ADC_read > (degree * TEMP_SENSOR_FACTOR) ){
    147e:	24 81       	ldd	r18, Z+4	; 0x04
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	82 17       	cp	r24, r18
    1484:	93 07       	cpc	r25, r19
    1486:	0c f4       	brge	.+2      	; 0x148a <vAirCond_ON+0x2c>
		SET_BIT(ATR_Port , AC_PIN);
    1488:	a4 9a       	sbi	0x14, 4	; 20
    148a:	08 95       	ret

0000148c <vAirCond_OFF>:
	}
}

void vAirCond_OFF(){
	CLR_BIT(ATR_Port , AC_PIN);
    148c:	a4 98       	cbi	0x14, 4	; 20
    148e:	08 95       	ret

00001490 <TWI_vMasterInt>:
	return TWDR;
}*/

	void TWI_vMasterInt()
{
		TWBR = (char)TWBR_val;
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	80 b9       	out	0x00, r24	; 0

}
    1494:	08 95       	ret

00001496 <TWI_Start>:
}

	void TWI_Start()
{
		/*start*/
		TWCR = 0x00;
    1496:	16 be       	out	0x36, r1	; 54
		SET_BIT(TWCR,TWINT); //set falg
    1498:	86 b7       	in	r24, 0x36	; 54
    149a:	80 68       	ori	r24, 0x80	; 128
    149c:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWEN);  //enable I2c
    149e:	86 b7       	in	r24, 0x36	; 54
    14a0:	84 60       	ori	r24, 0x04	; 4
    14a2:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWSTA);
    14a4:	86 b7       	in	r24, 0x36	; 54
    14a6:	80 62       	ori	r24, 0x20	; 32
    14a8:	86 bf       	out	0x36, r24	; 54
		while(!(READ_BIT_SET(TWCR,TWINT)))
    14aa:	06 b6       	in	r0, 0x36	; 54
    14ac:	07 fe       	sbrs	r0, 7
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <TWI_Start+0x14>
		{
			//wait
		}
		
		if ((TWSR &0xF8)==0x08)
    14b0:	81 b1       	in	r24, 0x01	; 1
		{
			
		}
			
			
}			
    14b2:	08 95       	ret

000014b4 <TWI_MSendAdrrs>:


	void TWI_MSendAdrrs(char address)
{
		/*send addrs*/
		TWDR= address <<1;
    14b4:	88 0f       	add	r24, r24
    14b6:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWCR,TWINT);
    14b8:	86 b7       	in	r24, 0x36	; 54
    14ba:	80 68       	ori	r24, 0x80	; 128
    14bc:	86 bf       	out	0x36, r24	; 54
		
		while(!(READ_BIT_SET(TWCR,TWINT)))
    14be:	06 b6       	in	r0, 0x36	; 54
    14c0:	07 fe       	sbrs	r0, 7
    14c2:	fd cf       	rjmp	.-6      	; 0x14be <TWI_MSendAdrrs+0xa>
		{
			//wait
		} 

		if ((TWSR &0xF8)==0x18)
    14c4:	81 b1       	in	r24, 0x01	; 1
		{
			
		}


}	
    14c6:	08 95       	ret

000014c8 <TWI_MSendData>:


	void TWI_MSendData(char data)
{
		/*send data*/
		TWDR = data;
    14c8:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWCR,TWINT);
    14ca:	86 b7       	in	r24, 0x36	; 54
    14cc:	80 68       	ori	r24, 0x80	; 128
    14ce:	86 bf       	out	0x36, r24	; 54
		while(!(READ_BIT_SET(TWCR,TWINT)))
    14d0:	06 b6       	in	r0, 0x36	; 54
    14d2:	07 fe       	sbrs	r0, 7
    14d4:	fd cf       	rjmp	.-6      	; 0x14d0 <TWI_MSendData+0x8>
		{
			//wait
		} 
		
		if ((TWSR &0xF8)==0x28)
    14d6:	81 b1       	in	r24, 0x01	; 1
		else
		{
			
		}

}	
    14d8:	08 95       	ret

000014da <TWI_MStop>:
	
		
	void TWI_MStop()
{
		/*stop*/
		SET_BIT(TWCR,TWSTO);
    14da:	86 b7       	in	r24, 0x36	; 54
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWINT);
    14e0:	86 b7       	in	r24, 0x36	; 54
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	86 bf       	out	0x36, r24	; 54
}
    14e6:	08 95       	ret

000014e8 <TWI_MasterTrans>:
{
		TWBR = (char)TWBR_val;

}
	void TWI_MasterTrans(char address, char data)
{
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	d8 2f       	mov	r29, r24
    14ee:	c6 2f       	mov	r28, r22
		TWI_Start();
    14f0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <TWI_Start>
		TWI_MSendAdrrs(address);
    14f4:	8d 2f       	mov	r24, r29
    14f6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_MSendAdrrs>
		TWI_MSendData(data);
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <TWI_MSendData>
		TWI_MStop();
    1500:	0e 94 6d 0a 	call	0x14da	; 0x14da <TWI_MStop>

	
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <TWI_vSlvint>:
				
					
	void TWI_vSlvint(char address)
{
	
		TWAR =address<<1;	
    150a:	88 0f       	add	r24, r24
    150c:	82 b9       	out	0x02, r24	; 2
		SET_BIT(TWCR,TWINT); // say slave addr
    150e:	86 b7       	in	r24, 0x36	; 54
    1510:	80 68       	ori	r24, 0x80	; 128
    1512:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWEN); //
    1514:	86 b7       	in	r24, 0x36	; 54
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWEA); // send ack	
    151a:	86 b7       	in	r24, 0x36	; 54
    151c:	80 64       	ori	r24, 0x40	; 64
    151e:	86 bf       	out	0x36, r24	; 54
	
}
    1520:	08 95       	ret

00001522 <TWI_Slaveavilb>:


	char TWI_Slaveavilb()
{
	
		SET_BIT(TWCR,TWINT);
    1522:	86 b7       	in	r24, 0x36	; 54
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	86 bf       	out	0x36, r24	; 54
		
		while(!(READ_BIT_SET(TWCR,TWINT)))
    1528:	06 b6       	in	r0, 0x36	; 54
    152a:	07 fe       	sbrs	r0, 7
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <TWI_Slaveavilb+0x6>
		{
			
		}
			
		if ((TWSR &0xF8)==0x60)
    152e:	91 b1       	in	r25, 0x01	; 1
    1530:	98 7f       	andi	r25, 0xF8	; 248
		{
			return 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 36       	cpi	r25, 0x60	; 96
    1536:	09 f0       	breq	.+2      	; 0x153a <TWI_Slaveavilb+0x18>
    1538:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
		}
				
		
	
}
    153a:	08 95       	ret

0000153c <TWI_Read>:


	char TWI_Read()
{
		DDRA = 0XFF;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	8a bb       	out	0x1a, r24	; 26
		SET_BIT(TWCR,TWINT);
    1540:	86 b7       	in	r24, 0x36	; 54
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWEN);
    1546:	86 b7       	in	r24, 0x36	; 54
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	86 bf       	out	0x36, r24	; 54
		SET_BIT(TWCR,TWEA);
    154c:	86 b7       	in	r24, 0x36	; 54
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	86 bf       	out	0x36, r24	; 54
		while(!(READ_BIT_SET(TWCR,TWINT)))
    1552:	06 b6       	in	r0, 0x36	; 54
    1554:	07 fe       	sbrs	r0, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <TWI_Read+0x16>
		{
			
		}
		DDRB = 0XFF;
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	87 bb       	out	0x17, r24	; 23
		return TWDR;
    155c:	83 b1       	in	r24, 0x03	; 3
    155e:	08 95       	ret

00001560 <KEYPAD_VINIT>:
//#include "DIO.h"
#include "COMMON_CONFIG.h"

	void KEYPAD_VINIT()
{
		DIO_vsetpindirection(PORT,PIN0,1);
    1560:	84 e4       	ldi	r24, 0x44	; 68
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN1,1);
    156a:	84 e4       	ldi	r24, 0x44	; 68
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN2,1);
    1574:	84 e4       	ldi	r24, 0x44	; 68
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN3,1);
    157e:	84 e4       	ldi	r24, 0x44	; 68
    1580:	63 e0       	ldi	r22, 0x03	; 3
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN4,0);
    1588:	84 e4       	ldi	r24, 0x44	; 68
    158a:	64 e0       	ldi	r22, 0x04	; 4
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN5,0);
    1592:	84 e4       	ldi	r24, 0x44	; 68
    1594:	65 e0       	ldi	r22, 0x05	; 5
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN6,0);
    159c:	84 e4       	ldi	r24, 0x44	; 68
    159e:	66 e0       	ldi	r22, 0x06	; 6
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORT,PIN7,0);
    15a6:	84 e4       	ldi	r24, 0x44	; 68
    15a8:	67 e0       	ldi	r22, 0x07	; 7
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
	
		DIO_vWrite(PORT ,PIN4,HIGH);
    15b0:	84 e4       	ldi	r24, 0x44	; 68
    15b2:	64 e0       	ldi	r22, 0x04	; 4
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
		DIO_vWrite(PORT ,PIN5,HIGH);
    15ba:	84 e4       	ldi	r24, 0x44	; 68
    15bc:	65 e0       	ldi	r22, 0x05	; 5
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
		DIO_vWrite(PORT ,PIN6,HIGH);
    15c4:	84 e4       	ldi	r24, 0x44	; 68
    15c6:	66 e0       	ldi	r22, 0x06	; 6
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
		DIO_vWrite(PORT ,PIN7,HIGH);
    15ce:	84 e4       	ldi	r24, 0x44	; 68
    15d0:	67 e0       	ldi	r22, 0x07	; 7
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
}
    15d8:	08 95       	ret

000015da <KEYPAD_u8SCAN>:

	unsigned char KEYPAD_u8SCAN() 
{		
    15da:	cf 92       	push	r12
    15dc:	df 92       	push	r13
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	60 97       	sbiw	r28, 0x10	; 16
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
		char row,col;
	
			for(row=0; row<4;row++) 
    15f8:	00 e0       	ldi	r16, 0x00	; 0
				DIO_vWrite(PORT ,row,LOW);
		 

				for (col=0;col<4;col++)
				{
					char KEYPAD[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}};
    15fa:	0f 2e       	mov	r0, r31
    15fc:	f6 e6       	ldi	r31, 0x66	; 102
    15fe:	cf 2e       	mov	r12, r31
    1600:	f1 e0       	ldi	r31, 0x01	; 1
    1602:	df 2e       	mov	r13, r31
    1604:	f0 2d       	mov	r31, r0
    1606:	ff 24       	eor	r15, r15
    1608:	68 94       	set
    160a:	f4 f8       	bld	r15, 4
{		
		char row,col;
	
			for(row=0; row<4;row++) 
			{
				DIO_vWrite(PORT ,PIN0,HIGH);
    160c:	84 e4       	ldi	r24, 0x44	; 68
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
				DIO_vWrite(PORT ,PIN1,HIGH);
    1616:	84 e4       	ldi	r24, 0x44	; 68
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
				DIO_vWrite(PORT ,PIN2,HIGH);
    1620:	84 e4       	ldi	r24, 0x44	; 68
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
				DIO_vWrite(PORT ,PIN3,HIGH);
    162a:	84 e4       	ldi	r24, 0x44	; 68
    162c:	63 e0       	ldi	r22, 0x03	; 3
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
				DIO_vWrite(PORT ,row,LOW);
    1634:	84 e4       	ldi	r24, 0x44	; 68
    1636:	60 2f       	mov	r22, r16
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
		 

				for (col=0;col<4;col++)
    163e:	10 e0       	ldi	r17, 0x00	; 0
				{
					char KEYPAD[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}};
    1640:	de 01       	movw	r26, r28
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	f6 01       	movw	r30, r12
    1646:	8f 2d       	mov	r24, r15
    1648:	01 90       	ld	r0, Z+
    164a:	0d 92       	st	X+, r0
    164c:	81 50       	subi	r24, 0x01	; 1
    164e:	e1 f7       	brne	.-8      	; 0x1648 <KEYPAD_u8SCAN+0x6e>
						
					char temp =	 DIO_vRead (PORT ,(col +4));
    1650:	61 2f       	mov	r22, r17
    1652:	6c 5f       	subi	r22, 0xFC	; 252
    1654:	84 e4       	ldi	r24, 0x44	; 68
    1656:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_vRead>
					
						if (temp==0)
    165a:	88 23       	and	r24, r24
    165c:	61 f4       	brne	.+24     	; 0x1676 <KEYPAD_u8SCAN+0x9c>
						{
			 				 return KEYPAD[row][col];
    165e:	e0 2f       	mov	r30, r16
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e1 0f       	add	r30, r17
    166c:	f1 1d       	adc	r31, r1
    166e:	ec 0f       	add	r30, r28
    1670:	fd 1f       	adc	r31, r29
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <KEYPAD_u8SCAN+0xaa>
				DIO_vWrite(PORT ,PIN2,HIGH);
				DIO_vWrite(PORT ,PIN3,HIGH);
				DIO_vWrite(PORT ,row,LOW);
		 

				for (col=0;col<4;col++)
    1676:	1f 5f       	subi	r17, 0xFF	; 255
    1678:	14 30       	cpi	r17, 0x04	; 4
    167a:	11 f7       	brne	.-60     	; 0x1640 <KEYPAD_u8SCAN+0x66>

	unsigned char KEYPAD_u8SCAN() 
{		
		char row,col;
	
			for(row=0; row<4;row++) 
    167c:	0f 5f       	subi	r16, 0xFF	; 255
    167e:	04 30       	cpi	r16, 0x04	; 4
    1680:	29 f6       	brne	.-118    	; 0x160c <KEYPAD_u8SCAN+0x32>
				}
	
			}
			
	
		return NoScan;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
}
    1684:	60 96       	adiw	r28, 0x10	; 16
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	08 95       	ret

000016a0 <SEVENSEG_vint>:


	void SEVENSEG_vint()
{
	
		DIO_vsetpindirection(PORTT,PIN0,1);
    16a0:	82 e4       	ldi	r24, 0x42	; 66
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN1,1);
    16aa:	82 e4       	ldi	r24, 0x42	; 66
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN2,1);
    16b4:	82 e4       	ldi	r24, 0x42	; 66
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN3,1);
    16be:	82 e4       	ldi	r24, 0x42	; 66
    16c0:	63 e0       	ldi	r22, 0x03	; 3
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN4,1);
    16c8:	82 e4       	ldi	r24, 0x42	; 66
    16ca:	64 e0       	ldi	r22, 0x04	; 4
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN5,1);
    16d2:	82 e4       	ldi	r24, 0x42	; 66
    16d4:	65 e0       	ldi	r22, 0x05	; 5
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN6,1);
    16dc:	82 e4       	ldi	r24, 0x42	; 66
    16de:	66 e0       	ldi	r22, 0x06	; 6
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
		DIO_vsetpindirection(PORTT,PIN7,1);
    16e6:	82 e4       	ldi	r24, 0x42	; 66
    16e8:	67 e0       	ldi	r22, 0x07	; 7
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
}
    16f0:	08 95       	ret

000016f2 <SEVENSEG_display>:
	


	void SEVENSEG_display(char dig)
{
    16f2:	68 2f       	mov	r22, r24
		DIO_vPORTSET(PORT, dig);
    16f4:	84 e4       	ldi	r24, 0x44	; 68
    16f6:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_vPORTSET>
    16fa:	08 95       	ret

000016fc <SFE>:
//#define  F_CPU 8000000ul
#include "COMMON_CONFIG.h"
	void SFE()
{
	
		SET_BIT(PORTB,EN_LCD);
    16fc:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16fe:	8f e3       	ldi	r24, 0x3F	; 63
    1700:	9c e9       	ldi	r25, 0x9C	; 156
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <SFE+0x6>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <SFE+0xc>
    1708:	00 00       	nop
		_delay_ms(20);
		CLR_BIT(PORTB,EN_LCD);
    170a:	c0 98       	cbi	0x18, 0	; 24
    170c:	8f e3       	ldi	r24, 0x3F	; 63
    170e:	9c e9       	ldi	r25, 0x9C	; 156
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <SFE+0x14>
    1714:	00 c0       	rjmp	.+0      	; 0x1716 <SFE+0x1a>
    1716:	00 00       	nop
		_delay_ms(20);
}
    1718:	08 95       	ret

0000171a <LCD_vSendCmd>:
	
}

	void LCD_vSendCmd(char cmd)
{
		PORTA =cmd;
    171a:	8b bb       	out	0x1b, r24	; 27
		CLR_BIT (PORTB,RS_LCD);
    171c:	c2 98       	cbi	0x18, 2	; 24
		SFE();
    171e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SFE>
}
    1722:	08 95       	ret

00001724 <LCD_vint>:
		_delay_ms(20);
}

	void LCD_vint()
{
		DDRA =0xff;
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	8a bb       	out	0x1a, r24	; 26
		DDRB |=0x07;
    1728:	87 b3       	in	r24, 0x17	; 23
    172a:	87 60       	ori	r24, 0x07	; 7
    172c:	87 bb       	out	0x17, r24	; 23
		CLR_BIT(PORTB,RW_LCD);
    172e:	c1 98       	cbi	0x18, 1	; 24
		LCD_vSendCmd(0x38);
    1730:	88 e3       	ldi	r24, 0x38	; 56
    1732:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		LCD_vSendCmd(0x01);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		LCD_vSendCmd(0x0e);
    173c:	8e e0       	ldi	r24, 0x0E	; 14
    173e:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
    1742:	8f e3       	ldi	r24, 0x3F	; 63
    1744:	9c e9       	ldi	r25, 0x9C	; 156
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_vint+0x22>
    174a:	00 c0       	rjmp	.+0      	; 0x174c <LCD_vint+0x28>
    174c:	00 00       	nop
		_delay_ms(20);
	
	
}
    174e:	08 95       	ret

00001750 <LCD_vsenddata>:
}
	
	
	void LCD_vsenddata(char data)
{
	  PORTA = data;
    1750:	8b bb       	out	0x1b, r24	; 27
	  SET_BIT(PORTB,RS_LCD);
    1752:	c2 9a       	sbi	0x18, 2	; 24
	  SFE();
    1754:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SFE>
}
    1758:	08 95       	ret

0000175a <LCD_vSDD>:
	
	void LCD_vSDD(char *NM)
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
				
		while((*NM) !='\0')
    1760:	88 81       	ld	r24, Y
    1762:	88 23       	and	r24, r24
    1764:	31 f0       	breq	.+12     	; 0x1772 <LCD_vSDD+0x18>
	  PORTA = data;
	  SET_BIT(PORTB,RS_LCD);
	  SFE();
}
	
	void LCD_vSDD(char *NM)
    1766:	21 96       	adiw	r28, 0x01	; 1
{
				
		while((*NM) !='\0')
		{
			LCD_vsenddata(*NM);
    1768:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
}
	
	void LCD_vSDD(char *NM)
{
				
		while((*NM) !='\0')
    176c:	89 91       	ld	r24, Y+
    176e:	88 23       	and	r24, r24
    1770:	d9 f7       	brne	.-10     	; 0x1768 <LCD_vSDD+0xe>
		{
			LCD_vsenddata(*NM);
			NM++;
		
		}
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <LCD_vMOVECur>:

	void LCD_vMOVECur(char row,char col)
{	
		char temp;
	
			if (1==row)
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	19 f4       	brne	.+6      	; 0x1782 <LCD_vMOVECur+0xa>
			{
				temp =0x80 + (col-1); 
    177c:	96 2f       	mov	r25, r22
    177e:	91 58       	subi	r25, 0x81	; 129
    1780:	04 c0       	rjmp	.+8      	; 0x178a <LCD_vMOVECur+0x12>
			}
		
			else if (2==row)
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	11 f4       	brne	.+4      	; 0x178a <LCD_vMOVECur+0x12>
			{
				temp =0xC0 + (col-1);
    1786:	96 2f       	mov	r25, r22
    1788:	91 54       	subi	r25, 0x41	; 65
			}
	
		LCD_vSendCmd(temp);
    178a:	89 2f       	mov	r24, r25
    178c:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
}
    1790:	08 95       	ret

00001792 <LCD_print>:

	
	void LCD_print(char *str)
	{
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	8c 01       	movw	r16, r24
		unsigned char i = 0;
		
		while(str[i] != 0)
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	88 23       	and	r24, r24
    17a0:	51 f0       	breq	.+20     	; 0x17b6 <LCD_print+0x24>
}

	
	void LCD_print(char *str)
	{
		unsigned char i = 0;
    17a2:	c0 e0       	ldi	r28, 0x00	; 0
		
		while(str[i] != 0)
		{
			LCD_vsenddata(str[i]);
    17a4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <LCD_vsenddata>
			i++;
    17a8:	cf 5f       	subi	r28, 0xFF	; 255
	
	void LCD_print(char *str)
	{
		unsigned char i = 0;
		
		while(str[i] != 0)
    17aa:	f8 01       	movw	r30, r16
    17ac:	ec 0f       	add	r30, r28
    17ae:	f1 1d       	adc	r31, r1
    17b0:	80 81       	ld	r24, Z
    17b2:	88 23       	and	r24, r24
    17b4:	b9 f7       	brne	.-18     	; 0x17a4 <LCD_print+0x12>
		{
			LCD_vsenddata(str[i]);
			i++;
		}
	}
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <LCD_LD>:


	void LCD_LD(unsigned char col, unsigned char row)
	{
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <LCD_LD+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <LCD_LD+0x8>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    17ca:	90 e8       	ldi	r25, 0x80	; 128
    17cc:	99 83       	std	Y+1, r25	; 0x01
    17ce:	90 ec       	ldi	r25, 0xC0	; 192
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	94 e9       	ldi	r25, 0x94	; 148
    17d4:	9b 83       	std	Y+3, r25	; 0x03
    17d6:	94 ed       	ldi	r25, 0xD4	; 212
    17d8:	9c 83       	std	Y+4, r25	; 0x04
	LCD_vSendCmd(firstcharAdr[row-1] + col - 1);
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	fe 01       	movw	r30, r28
    17de:	e6 0f       	add	r30, r22
    17e0:	f1 1d       	adc	r31, r1
    17e2:	90 81       	ld	r25, Z
    17e4:	89 0f       	add	r24, r25
    17e6:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17ea:	87 ec       	ldi	r24, 0xC7	; 199
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_LD+0x30>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <LCD_LD+0x36>
    17f4:	00 00       	nop
	_delay_us(100);
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <LCD_vCLEARS>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	99 e6       	ldi	r25, 0x69	; 105
    1808:	a8 e1       	ldi	r26, 0x18	; 24
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	90 40       	sbci	r25, 0x00	; 0
    180e:	a0 40       	sbci	r26, 0x00	; 0
    1810:	e1 f7       	brne	.-8      	; 0x180a <LCD_vCLEARS+0x6>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <LCD_vCLEARS+0x10>
    1814:	00 00       	nop
	
	
	void LCD_vCLEARS()
{
		_delay_ms(1000);
		LCD_vSendCmd (CLR_DIS);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
		
		LCD_LD(1,1);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_LD>
	
}	
    1824:	08 95       	ret

00001826 <SFE4>:
//#define  F_CPU 8000000ul
#include "COMMON_CONFIG.h"
	void SFE4()
{
	
		SET_BIT(PORTB,RS_LCD);
    1826:	c2 9a       	sbi	0x18, 2	; 24
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	90 e7       	ldi	r25, 0x70	; 112
    182c:	a2 e0       	ldi	r26, 0x02	; 2
    182e:	81 50       	subi	r24, 0x01	; 1
    1830:	90 40       	sbci	r25, 0x00	; 0
    1832:	a0 40       	sbci	r26, 0x00	; 0
    1834:	e1 f7       	brne	.-8      	; 0x182e <SFE4+0x8>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <SFE4+0x12>
    1838:	00 00       	nop
		_delay_ms(100);
		CLR_BIT(PORTB,RS_LCD);
    183a:	c2 98       	cbi	0x18, 2	; 24
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	90 e7       	ldi	r25, 0x70	; 112
    1840:	a2 e0       	ldi	r26, 0x02	; 2
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	90 40       	sbci	r25, 0x00	; 0
    1846:	a0 40       	sbci	r26, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <SFE4+0x1c>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <SFE4+0x26>
    184c:	00 00       	nop
		_delay_ms(100);
	
}
    184e:	08 95       	ret

00001850 <LCD4_vSendCmd>:
	
	
}

	void LCD4_vSendCmd(char cmd)
{
    1850:	cf 93       	push	r28
    1852:	c8 2f       	mov	r28, r24
		CLR_BIT (PORTB,RS_LCD);
    1854:	c2 98       	cbi	0x18, 2	; 24
		PORTA &=0x0f;
    1856:	8b b3       	in	r24, 0x1b	; 27
    1858:	8f 70       	andi	r24, 0x0F	; 15
    185a:	8b bb       	out	0x1b, r24	; 27
		PORTA |=(cmd& 0xf0);
    185c:	8b b3       	in	r24, 0x1b	; 27
    185e:	9c 2f       	mov	r25, r28
    1860:	90 7f       	andi	r25, 0xF0	; 240
    1862:	89 2b       	or	r24, r25
    1864:	8b bb       	out	0x1b, r24	; 27
		SFE4();
    1866:	0e 94 13 0c 	call	0x1826	; 0x1826 <SFE4>
		PORTA &=0x0f;
    186a:	8b b3       	in	r24, 0x1b	; 27
    186c:	8f 70       	andi	r24, 0x0F	; 15
    186e:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (cmd<<4);
    1870:	8b b3       	in	r24, 0x1b	; 27
    1872:	c2 95       	swap	r28
    1874:	c0 7f       	andi	r28, 0xF0	; 240
    1876:	c8 2b       	or	r28, r24
    1878:	cb bb       	out	0x1b, r28	; 27
		SFE4();
    187a:	0e 94 13 0c 	call	0x1826	; 0x1826 <SFE4>
}
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <LCD4_vint>:
	
}

	void LCD4_vint()
{
		DDRA =0xf0;
    1882:	80 ef       	ldi	r24, 0xF0	; 240
    1884:	8a bb       	out	0x1a, r24	; 26
		DDRB |=0x0e;
    1886:	87 b3       	in	r24, 0x17	; 23
    1888:	8e 60       	ori	r24, 0x0E	; 14
    188a:	87 bb       	out	0x17, r24	; 23
		CLR_BIT(PORTB,RW_LCD);
    188c:	c1 98       	cbi	0x18, 1	; 24
		LCD4_vSendCmd(0x33);
    188e:	83 e3       	ldi	r24, 0x33	; 51
    1890:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
		LCD4_vSendCmd(0x32);
    1894:	82 e3       	ldi	r24, 0x32	; 50
    1896:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
		LCD4_vSendCmd(0x28);
    189a:	88 e2       	ldi	r24, 0x28	; 40
    189c:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
		LCD4_vSendCmd(0x01);
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
		LCD4_vSendCmd(0x0e);
    18a6:	8e e0       	ldi	r24, 0x0E	; 14
    18a8:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
    18ac:	8f e3       	ldi	r24, 0x3F	; 63
    18ae:	9c e9       	ldi	r25, 0x9C	; 156
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD4_vint+0x2e>
    18b4:	00 c0       	rjmp	.+0      	; 0x18b6 <LCD4_vint+0x34>
    18b6:	00 00       	nop
		_delay_ms(20);
	
	
}
    18b8:	08 95       	ret

000018ba <LCD4_vsenddata>:
		PORTA |= (cmd<<4);
		SFE4();
}

	void LCD4_vsenddata(char data)
{
    18ba:	cf 93       	push	r28
    18bc:	c8 2f       	mov	r28, r24
		SET_BIT (PORTB,RS_LCD);
    18be:	c2 9a       	sbi	0x18, 2	; 24
		PORTA &=0x0f;
    18c0:	8b b3       	in	r24, 0x1b	; 27
    18c2:	8f 70       	andi	r24, 0x0F	; 15
    18c4:	8b bb       	out	0x1b, r24	; 27
		PORTA |=(data& 0xf0);
    18c6:	8b b3       	in	r24, 0x1b	; 27
    18c8:	9c 2f       	mov	r25, r28
    18ca:	90 7f       	andi	r25, 0xF0	; 240
    18cc:	89 2b       	or	r24, r25
    18ce:	8b bb       	out	0x1b, r24	; 27
		SFE4();
    18d0:	0e 94 13 0c 	call	0x1826	; 0x1826 <SFE4>
		PORTA &=0x0f;
    18d4:	8b b3       	in	r24, 0x1b	; 27
    18d6:	8f 70       	andi	r24, 0x0F	; 15
    18d8:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (data<<4);
    18da:	8b b3       	in	r24, 0x1b	; 27
    18dc:	c2 95       	swap	r28
    18de:	c0 7f       	andi	r28, 0xF0	; 240
    18e0:	c8 2b       	or	r28, r24
    18e2:	cb bb       	out	0x1b, r28	; 27
		SFE4();
    18e4:	0e 94 13 0c 	call	0x1826	; 0x1826 <SFE4>
}
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <LCD4_vSDD>:

	void LCD4_vSDD(char *NM)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
	
		while(*NM !='\0')
    18f2:	88 81       	ld	r24, Y
    18f4:	88 23       	and	r24, r24
    18f6:	31 f0       	breq	.+12     	; 0x1904 <LCD4_vSDD+0x18>
		PORTA &=0x0f;
		PORTA |= (data<<4);
		SFE4();
}

	void LCD4_vSDD(char *NM)
    18f8:	21 96       	adiw	r28, 0x01	; 1
{
	
		while(*NM !='\0')
		{
			LCD4_vsenddata(*NM);
    18fa:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD4_vsenddata>
}

	void LCD4_vSDD(char *NM)
{
	
		while(*NM !='\0')
    18fe:	89 91       	ld	r24, Y+
    1900:	88 23       	and	r24, r24
    1902:	d9 f7       	brne	.-10     	; 0x18fa <LCD4_vSDD+0xe>
		{
			LCD4_vsenddata(*NM);
			NM++;
		
		}
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <LCD4_vMOVECur>:

	void LCD4_vMOVECur(char row,char col)
{
		char temp;
		
			if (row==1)
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	19 f4       	brne	.+6      	; 0x1914 <LCD4_vMOVECur+0xa>
			{
				temp =0x80+col-1; 
    190e:	96 2f       	mov	r25, r22
    1910:	91 58       	subi	r25, 0x81	; 129
    1912:	04 c0       	rjmp	.+8      	; 0x191c <LCD4_vMOVECur+0x12>
			}
	
			else if (row==2)
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	11 f4       	brne	.+4      	; 0x191c <LCD4_vMOVECur+0x12>
			{
		
				temp =0xC0+col-1;
    1918:	96 2f       	mov	r25, r22
    191a:	91 54       	subi	r25, 0x41	; 65
			}
	
		LCD4_vSendCmd(temp);
    191c:	89 2f       	mov	r24, r25
    191e:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
}
    1922:	08 95       	ret

00001924 <LCD4_print>:


void LCD4_print(char *str)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	8c 01       	movw	r16, r24
	unsigned char i = 0;
			
	while(str[i] != 0)
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	51 f0       	breq	.+20     	; 0x1948 <LCD4_print+0x24>
}


void LCD4_print(char *str)
{
	unsigned char i = 0;
    1934:	c0 e0       	ldi	r28, 0x00	; 0
			
	while(str[i] != 0)
	{
		LCD4_vsenddata(str[i]);
    1936:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <LCD4_vsenddata>
		i++;
    193a:	cf 5f       	subi	r28, 0xFF	; 255

void LCD4_print(char *str)
{
	unsigned char i = 0;
			
	while(str[i] != 0)
    193c:	f8 01       	movw	r30, r16
    193e:	ec 0f       	add	r30, r28
    1940:	f1 1d       	adc	r31, r1
    1942:	80 81       	ld	r24, Z
    1944:	88 23       	and	r24, r24
    1946:	b9 f7       	brne	.-18     	; 0x1936 <LCD4_print+0x12>
	{
		LCD4_vsenddata(str[i]);
		i++;
	}
}
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	08 95       	ret

00001950 <LCD4_LD>:


void LCD4_LD(unsigned char x, unsigned char y)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 d0       	rcall	.+0      	; 0x1956 <LCD4_LD+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <LCD4_LD+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    195c:	90 e8       	ldi	r25, 0x80	; 128
    195e:	99 83       	std	Y+1, r25	; 0x01
    1960:	90 ec       	ldi	r25, 0xC0	; 192
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	94 e9       	ldi	r25, 0x94	; 148
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	94 ed       	ldi	r25, 0xD4	; 212
    196a:	9c 83       	std	Y+4, r25	; 0x04
LCD4_vSendCmd(firstcharAdr[y-1] + x - 1);
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	fe 01       	movw	r30, r28
    1970:	e6 0f       	add	r30, r22
    1972:	f1 1d       	adc	r31, r1
    1974:	90 81       	ld	r25, Z
    1976:	89 0f       	add	r24, r25
    1978:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD4_vSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    197c:	87 ec       	ldi	r24, 0xC7	; 199
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD4_LD+0x30>
    1984:	00 c0       	rjmp	.+0      	; 0x1986 <LCD4_LD+0x36>
    1986:	00 00       	nop
 _delay_us(100);
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <LCD4_vCLEARS>:
}


	void LCD4_vCLEARS()
{	
		LCD_vSendCmd (CLR_DIS);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	0e 94 8d 0b 	call	0x171a	; 0x171a <LCD_vSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	93 ed       	ldi	r25, 0xD3	; 211
    19a0:	a0 e3       	ldi	r26, 0x30	; 48
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	90 40       	sbci	r25, 0x00	; 0
    19a6:	a0 40       	sbci	r26, 0x00	; 0
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <LCD4_vCLEARS+0xc>
    19aa:	00 c0       	rjmp	.+0      	; 0x19ac <LCD4_vCLEARS+0x16>
    19ac:	00 00       	nop
		_delay_ms(2000);
		LCD4_LD(1,1);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD4_LD>
		
		
}
    19b6:	08 95       	ret

000019b8 <LED_vInit>:
 */ 
#include <avr/io.h>
#include "LED.h"

void  LED_vInit(char portname,char pinnum){
	DIO_vsetpindirection(portname,pinnum,1);
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	0e 94 67 00 	call	0xce	; 0xce <DIO_vsetpindirection>
	
}
    19c4:	08 95       	ret

000019c6 <LED_vON>:
void LED_vON(char portname,char pinnum){
	DIO_vWrite(portname ,pinnum,HIGH);
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
}	
    19d2:	08 95       	ret

000019d4 <LED_vOFF>:
void LED_vOFF(char portname,char pinnum){
	DIO_vWrite(portname ,pinnum,LOW);
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_vWrite>
}
    19e0:	08 95       	ret

000019e2 <LED_vTOGGLE>:
void LED_vTOGGLE(char portname,char pinnum)
{
	
	 DIO_vToggle(portname ,pinnum);
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	0e 94 89 01 	call	0x312	; 0x312 <DIO_vToggle>
    19ea:	08 95       	ret

000019ec <main>:


#include <avr/io.h>
#include "COMMON_CONFIG.h"
int main(void)
{
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <main+0x6>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <main+0x8>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
   HOUSE_PORT = HOUSE_POWER ;		/* POWER FOR THE HOUSE	*/
    19fa:	8f e1       	ldi	r24, 0x1F	; 31
    19fc:	84 bb       	out	0x14, r24	; 20
   SENSOR_PORT = SENSOR_READ ;		/* SENSOR INTERFACE WITH THE HOUSE	*/
    19fe:	1a ba       	out	0x1a, r1	; 26
   
   Option O1 ;
   ptr_option = &O1 ;
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	90 93 7a 01 	sts	0x017A, r25
    1a08:	80 93 79 01 	sts	0x0179, r24
   
   while(1)
   {
	   /*	RECIVEING WHICH FEATURE THE USER WANNA OPEN	*/
	   ptr_option->Recieve = SPI_u8Recive();
    1a0c:	00 91 79 01 	lds	r16, 0x0179
    1a10:	10 91 7a 01 	lds	r17, 0x017A
    1a14:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
	   
	   switch(ptr_option->Recieve){
    1a1c:	00 91 79 01 	lds	r16, 0x0179
    1a20:	10 91 7a 01 	lds	r17, 0x017A
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 81       	ld	r24, Z
    1a28:	82 33       	cpi	r24, 0x32	; 50
    1a2a:	91 f0       	breq	.+36     	; 0x1a50 <main+0x64>
    1a2c:	83 33       	cpi	r24, 0x33	; 51
    1a2e:	28 f4       	brcc	.+10     	; 0x1a3a <main+0x4e>
    1a30:	80 33       	cpi	r24, 0x30	; 48
    1a32:	51 f0       	breq	.+20     	; 0x1a48 <main+0x5c>
    1a34:	81 33       	cpi	r24, 0x31	; 49
    1a36:	51 f7       	brne	.-44     	; 0x1a0c <main+0x20>
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <main+0x60>
    1a3a:	84 33       	cpi	r24, 0x34	; 52
    1a3c:	51 f1       	breq	.+84     	; 0x1a92 <main+0xa6>
    1a3e:	84 33       	cpi	r24, 0x34	; 52
    1a40:	60 f0       	brcs	.+24     	; 0x1a5a <main+0x6e>
    1a42:	87 33       	cpi	r24, 0x37	; 55
    1a44:	19 f7       	brne	.-58     	; 0x1a0c <main+0x20>
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <main+0x68>
		   case ROOM1:
		   /* ACCESSING ROOM 1	*/
		   SET_BIT(ATR_Port , ROOM1_PIN);
    1a48:	a0 9a       	sbi	0x14, 0	; 20
		   break;
    1a4a:	e0 cf       	rjmp	.-64     	; 0x1a0c <main+0x20>
		   
		   case ROOM2:
		   /* ACCESSING ROOM 2	*/
		   SET_BIT(ATR_Port , ROOM2_PIN);
    1a4c:	a1 9a       	sbi	0x14, 1	; 20
		   break;
    1a4e:	de cf       	rjmp	.-68     	; 0x1a0c <main+0x20>
		   
		   case ROOM3:
		   /* ACCESSING ROOM 3	*/
		   SET_BIT(ATR_Port , ROOM3_PIN);
    1a50:	a2 9a       	sbi	0x14, 2	; 20
		   break;
    1a52:	dc cf       	rjmp	.-72     	; 0x1a0c <main+0x20>
		   
		   case LOGOUT_SLAVE:
		   /*	CLOSE THE HOUSE	*/
		   logout:			
		   
		   ATR_Port = stop ;
    1a54:	14 ba       	out	0x14, r1	; 20
		   cli();	/* INTERRUPTS OFF */
    1a56:	f8 94       	cli
		   break ;
    1a58:	d9 cf       	rjmp	.-78     	; 0x1a0c <main+0x20>
		   
		   
		   case TV:
		   /*	ACCESSING TV	*/
		   Tv_access:	
		   	ptr_option->Tv_State = SPI_u8Recive();
    1a5a:	00 91 79 01 	lds	r16, 0x0179
    1a5e:	10 91 7a 01 	lds	r17, 0x017A
    1a62:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1a66:	f8 01       	movw	r30, r16
    1a68:	81 83       	std	Z+1, r24	; 0x01
		   
		   /* CHECK IF USER WANNA ON OR OFF TV	*/
		   if(ptr_option->Tv_State == ON){
    1a6a:	e0 91 79 01 	lds	r30, 0x0179
    1a6e:	f0 91 7a 01 	lds	r31, 0x017A
    1a72:	81 81       	ldd	r24, Z+1	; 0x01
    1a74:	81 33       	cpi	r24, 0x31	; 49
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <main+0x9a>
			   /* TV ON	*/
			   vTv_ON();
    1a78:	0e 94 2b 0a 	call	0x1456	; 0x1456 <vTv_ON>
			   
			   /*	IF USER WANNA LOGOUT	*/
			   if(SPI_u8Recive() == LOGOUT_SLAVE){
    1a7c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1a80:	87 33       	cpi	r24, 0x37	; 55
    1a82:	21 f6       	brne	.-120    	; 0x1a0c <main+0x20>
    1a84:	e7 cf       	rjmp	.-50     	; 0x1a54 <main+0x68>
				   goto logout;
			   }

		   }
		   else if(ptr_option->Tv_State == OFF){
    1a86:	80 33       	cpi	r24, 0x30	; 48
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <main+0xa0>
    1a8a:	c0 cf       	rjmp	.-128    	; 0x1a0c <main+0x20>
			   /* TV OFF	*/
			   vTv_ON();
    1a8c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <vTv_ON>
			   goto Tv_access ;
    1a90:	e4 cf       	rjmp	.-56     	; 0x1a5a <main+0x6e>
		   
		   case AC:
		   /* ACCESSING AIRCONDTION	*/
		   AirCond_Access:
		   /* ASKING IF USER WANTS IT ON OR OFF	*/
		   ptr_option->AirCond_State =SPI_u8Recive();
    1a92:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1a96:	f8 01       	movw	r30, r16
    1a98:	82 83       	std	Z+2, r24	; 0x02
		   
		   if(ptr_option->AirCond_State == ON){
    1a9a:	e0 91 79 01 	lds	r30, 0x0179
    1a9e:	f0 91 7a 01 	lds	r31, 0x017A
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	81 33       	cpi	r24, 0x31	; 49
    1aa6:	89 f4       	brne	.+34     	; 0x1aca <main+0xde>
			   sei();	/* INTERRUPTS ON	*/
    1aa8:	78 94       	sei
			   
			   /*	RECIVEING DESIRED TEMPERATURE DEGREE FROM USER	*/
			   ptr_option->AirCondDegree = SPI_u8Recive();
    1aaa:	00 91 79 01 	lds	r16, 0x0179
    1aae:	10 91 7a 01 	lds	r17, 0x017A
    1ab2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	83 83       	std	Z+3, r24	; 0x03
			   
			   /* IF ON START CONVERTING THE TEMPERATURE SENSOR READ TO BINARY	..	THE ISR CONTROLS THE COMPARE STAGE */
			   ADC_vStartconvin();
    1aba:	0e 94 5d 00 	call	0xba	; 0xba <ADC_vStartconvin>
			   
			   /* LOGOUT IF USER WANTS TO	*/
			   if(SPI_u8Recive() == LOGOUT_SLAVE){
    1abe:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <SPI_u8Recive>
    1ac2:	87 33       	cpi	r24, 0x37	; 55
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <main+0xdc>
    1ac6:	a2 cf       	rjmp	.-188    	; 0x1a0c <main+0x20>
    1ac8:	c5 cf       	rjmp	.-118    	; 0x1a54 <main+0x68>
				   goto logout;
			   }

		   }
		   /* CLOSE AIRCONDTION	*/
		   else if(ptr_option->AirCond_State == OFF){
    1aca:	80 33       	cpi	r24, 0x30	; 48
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <main+0xe4>
    1ace:	9e cf       	rjmp	.-196    	; 0x1a0c <main+0x20>
			   cli();		/* INTERRUPTS OFF	*/
    1ad0:	f8 94       	cli
			   vAirCond_OFF();
    1ad2:	0e 94 46 0a 	call	0x148c	; 0x148c <vAirCond_OFF>
    1ad6:	9a cf       	rjmp	.-204    	; 0x1a0c <main+0x20>

00001ad8 <__vector_16>:



/*	ADC INTTERRUPT	*/

ISR(ADC_vect){
    1ad8:	1f 92       	push	r1
    1ada:	0f 92       	push	r0
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31
	
	/*	READING ADC CONVERTED VALUE	*/
	ptr_option->ADC_read = ADC_u16Read_intr();
    1afe:	c0 91 79 01 	lds	r28, 0x0179
    1b02:	d0 91 7a 01 	lds	r29, 0x017A
    1b06:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_u16Read_intr>
    1b0a:	8c 83       	std	Y+4, r24	; 0x04
	
	/* COMPARE DESIRED TEMPERATURE DEGREE WITH THE SENSOR READING	*/
	vAirCond_ON(ptr_option->AirCondDegree);
    1b0c:	e0 91 79 01 	lds	r30, 0x0179
    1b10:	f0 91 7a 01 	lds	r31, 0x017A
    1b14:	83 81       	ldd	r24, Z+3	; 0x03
    1b16:	0e 94 2f 0a 	call	0x145e	; 0x145e <vAirCond_ON>
	
	ADC_vStartconvin();
    1b1a:	0e 94 5d 00 	call	0xba	; 0xba <ADC_vStartconvin>
}
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	bf 91       	pop	r27
    1b28:	af 91       	pop	r26
    1b2a:	9f 91       	pop	r25
    1b2c:	8f 91       	pop	r24
    1b2e:	7f 91       	pop	r23
    1b30:	6f 91       	pop	r22
    1b32:	5f 91       	pop	r21
    1b34:	4f 91       	pop	r20
    1b36:	3f 91       	pop	r19
    1b38:	2f 91       	pop	r18
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0
    1b40:	1f 90       	pop	r1
    1b42:	18 95       	reti

00001b44 <SPI_vINTMASTRE>:
//#include "SPI.h"
#include "COMMON_CONFIG.h"

	void SPI_vINTMASTRE()
{
		SET_BIT(SPCR,SPR0);
    1b44:	68 9a       	sbi	0x0d, 0	; 13
		SET_BIT(SPCR,MSTR);
    1b46:	6c 9a       	sbi	0x0d, 4	; 13
	
		SET_BIT(DDRB,ss);
    1b48:	bc 9a       	sbi	0x17, 4	; 23
		SET_BIT(DDRB,mosi);
    1b4a:	bd 9a       	sbi	0x17, 5	; 23
		SET_BIT(DDRB,sck);
    1b4c:	bf 9a       	sbi	0x17, 7	; 23
		SET_BIT(SPCR,CPOL);
    1b4e:	6b 9a       	sbi	0x0d, 3	; 13
		SET_BIT(SPCR,CPHA);
    1b50:	6a 9a       	sbi	0x0d, 2	; 13
		SET_BIT(PORTB,ss);
    1b52:	c4 9a       	sbi	0x18, 4	; 24
		SET_BIT(SPCR,SPE);
    1b54:	6e 9a       	sbi	0x0d, 6	; 13
}
    1b56:	08 95       	ret

00001b58 <SPI_vINTSlave>:


	void SPI_vINTSlave()
{
		CLR_BIT(SPCR,MSTR);
    1b58:	6c 98       	cbi	0x0d, 4	; 13
		SET_BIT(DDRB,miso);
    1b5a:	be 9a       	sbi	0x17, 6	; 23
		SET_BIT(SPCR,CPOL);
    1b5c:	6b 9a       	sbi	0x0d, 3	; 13
		SET_BIT(SPCR,CPHA);
    1b5e:	6a 9a       	sbi	0x0d, 2	; 13
		SET_BIT(SPCR,SPE);
    1b60:	6e 9a       	sbi	0x0d, 6	; 13
		
}
    1b62:	08 95       	ret

00001b64 <SPI_vTransf>:


	void SPI_vTransf(char data)
{
		CLR_BIT(PORTB,ss);
    1b64:	c4 98       	cbi	0x18, 4	; 24
	
		SPDR = data;
    1b66:	8f b9       	out	0x0f, r24	; 15
	
		while(!(READ_BIT_SET(SPSR,SPIF)))
    1b68:	77 9b       	sbis	0x0e, 7	; 14
    1b6a:	fe cf       	rjmp	.-4      	; 0x1b68 <SPI_vTransf+0x4>
	
		{
			//wait
		}
	
		SET_BIT(PORTB,ss);	
    1b6c:	c4 9a       	sbi	0x18, 4	; 24
}
    1b6e:	08 95       	ret

00001b70 <SPI_u8Recive>:


	char SPI_u8Recive()
{
		while(!(READ_BIT_SET(SPSR,SPIF)))
    1b70:	77 9b       	sbis	0x0e, 7	; 14
    1b72:	fe cf       	rjmp	.-4      	; 0x1b70 <SPI_u8Recive>
	
		{
			//wait
		}
		
		return SPDR;
    1b74:	8f b1       	in	r24, 0x0f	; 15
	
    1b76:	08 95       	ret

00001b78 <TIMER_vInt>:

	void TIMER_vInt()
{
	
		/*choose ocr0*/
		OCR0 =78;
    1b78:	8e e4       	ldi	r24, 0x4E	; 78
    1b7a:	8c bf       	out	0x3c, r24	; 60
		
		/*choose mode*/
		CLR_BIT (TCCR0,WGM00);
    1b7c:	83 b7       	in	r24, 0x33	; 51
    1b7e:	8f 7b       	andi	r24, 0xBF	; 191
    1b80:	83 bf       	out	0x33, r24	; 51
		SET_BIT (TCCR0,WGM01);
    1b82:	83 b7       	in	r24, 0x33	; 51
    1b84:	88 60       	ori	r24, 0x08	; 8
    1b86:	83 bf       	out	0x33, r24	; 51
	
		/*choose prescale clock put it at the end*/
		SET_BIT(TCCR0,CS00);
    1b88:	83 b7       	in	r24, 0x33	; 51
    1b8a:	81 60       	ori	r24, 0x01	; 1
    1b8c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT (TCCR0,CS01);
    1b8e:	83 b7       	in	r24, 0x33	; 51
    1b90:	8d 7f       	andi	r24, 0xFD	; 253
    1b92:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    1b94:	83 b7       	in	r24, 0x33	; 51
    1b96:	84 60       	ori	r24, 0x04	; 4
    1b98:	83 bf       	out	0x33, r24	; 51
	
		
	
		/*globel interupt*/
		sei ();
    1b9a:	78 94       	sei
	
		/*set timer conter*/
		SET_BIT(TIMSK,OCIE0);
    1b9c:	89 b7       	in	r24, 0x39	; 57
    1b9e:	82 60       	ori	r24, 0x02	; 2
    1ba0:	89 bf       	out	0x39, r24	; 57
	
}
    1ba2:	08 95       	ret

00001ba4 <Timer1_vInit_16bit>:



void Timer1_vInit_16bit(void){
	
	cli();	/* disableing interrupts	*/
    1ba4:	f8 94       	cli
	
	/* putting number to where the timer return to zero ( TICK = 100 ms ) */
	OCR1A = 781;
    1ba6:	8d e0       	ldi	r24, 0x0D	; 13
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	9b bd       	out	0x2b, r25	; 43
    1bac:	8a bd       	out	0x2a, r24	; 42
	
	sei(); /* global I bit to enable interrupt */
    1bae:	78 94       	sei
	
	/* choosing which mode to apply "CTC Mode" */
	CLR_BIT(TCCR1A,WGM10);
    1bb0:	8f b5       	in	r24, 0x2f	; 47
    1bb2:	8e 7f       	andi	r24, 0xFE	; 254
    1bb4:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,WGM11);
    1bb6:	8f b5       	in	r24, 0x2f	; 47
    1bb8:	8d 7f       	andi	r24, 0xFD	; 253
    1bba:	8f bd       	out	0x2f, r24	; 47
	
	SET_BIT(TCCR1B , WGM12);
    1bbc:	8e b5       	in	r24, 0x2e	; 46
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B , WGM13);
    1bc2:	8e b5       	in	r24, 0x2e	; 46
    1bc4:	8f 7e       	andi	r24, 0xEF	; 239
    1bc6:	8e bd       	out	0x2e, r24	; 46
	
	/* choosing which Prescaler "1024" factor */
	SET_BIT(TCCR1B,CS12);
    1bc8:	8e b5       	in	r24, 0x2e	; 46
    1bca:	84 60       	ori	r24, 0x04	; 4
    1bcc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS10);
    1bce:	8e b5       	in	r24, 0x2e	; 46
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    1bd4:	8e b5       	in	r24, 0x2e	; 46
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	SET_BIT(TIMSK,OCIE1A);  /* Enable Timer Compare match Interrupt */
    1bda:	89 b7       	in	r24, 0x39	; 57
    1bdc:	80 61       	ori	r24, 0x10	; 16
    1bde:	89 bf       	out	0x39, r24	; 57
	
    1be0:	08 95       	ret

00001be2 <TimerPWM_vint>:
//#include "TimerPWM.h"
#include "COMMON_CONFIG.h"

	void TimerPWM_vint()
{
		OCR0 =1; 
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8c bf       	out	0x3c, r24	; 60
		
		/*choose mode*/
		SET_BIT(TCCR0,WGM01);
    1be6:	83 b7       	in	r24, 0x33	; 51
    1be8:	88 60       	ori	r24, 0x08	; 8
    1bea:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM00);
    1bec:	83 b7       	in	r24, 0x33	; 51
    1bee:	80 64       	ori	r24, 0x40	; 64
    1bf0:	83 bf       	out	0x33, r24	; 51
		
		/*sent inverter mode*/
		SET_BIT(TCCR0,COM01);
    1bf2:	83 b7       	in	r24, 0x33	; 51
    1bf4:	80 62       	ori	r24, 0x20	; 32
    1bf6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,COM00);
    1bf8:	83 b7       	in	r24, 0x33	; 51
    1bfa:	8f 7e       	andi	r24, 0xEF	; 239
    1bfc:	83 bf       	out	0x33, r24	; 51
		 
		/*outpou for PWM wave*/
		SET_BIT(DDRB,PIN);
    1bfe:	bb 9a       	sbi	0x17, 3	; 23
	 
		/*choose prescale clock put it at the end*/
		SET_BIT(TCCR0,CS00);
    1c00:	83 b7       	in	r24, 0x33	; 51
    1c02:	81 60       	ori	r24, 0x01	; 1
    1c04:	83 bf       	out	0x33, r24	; 51
		CLR_BIT (TCCR0,CS01);
    1c06:	83 b7       	in	r24, 0x33	; 51
    1c08:	8d 7f       	andi	r24, 0xFD	; 253
    1c0a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS02);
    1c0c:	83 b7       	in	r24, 0x33	; 51
    1c0e:	84 60       	ori	r24, 0x04	; 4
    1c10:	83 bf       	out	0x33, r24	; 51
	 
		/*globel interupt*/
		sei ();
    1c12:	78 94       	sei
		/*set timer conter*/
		SET_BIT(TIMSK,TOIE0);
    1c14:	89 b7       	in	r24, 0x39	; 57
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	89 bf       	out	0x39, r24	; 57
	 	
}
    1c1a:	08 95       	ret

00001c1c <TimerPWM_SetDC>:


	void TimerPWM_SetDC(float val)
{
		OCR0 =val*256;
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	53 e4       	ldi	r21, 0x43	; 67
    1c24:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulsf3>
    1c28:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__fixunssfsi>
    1c2c:	6c bf       	out	0x3c, r22	; 60
}
    1c2e:	08 95       	ret

00001c30 <UART_vInit>:
//#include <avr/interrupt.h>
//#include <util/delay.h>
#include "COMMON_CONFIG.h"

	void UART_vInit(long baud)
{
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
		/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
		short rate =(F_OSC/(16*baud));
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	aa 1f       	adc	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	9c 01       	movw	r18, r24
    1c46:	ad 01       	movw	r20, r26
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	44 1f       	adc	r20, r20
    1c4e:	55 1f       	adc	r21, r21
    1c50:	22 0f       	add	r18, r18
    1c52:	33 1f       	adc	r19, r19
    1c54:	44 1f       	adc	r20, r20
    1c56:	55 1f       	adc	r21, r21
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	72 e1       	ldi	r23, 0x12	; 18
    1c5c:	8a e7       	ldi	r24, 0x7A	; 122
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__udivmodsi4>
		UBRRL =(char) rate;
    1c64:	29 b9       	out	0x09, r18	; 9
		UBRRH = (char) (rate>>8);
    1c66:	23 2f       	mov	r18, r19
    1c68:	33 0f       	add	r19, r19
    1c6a:	33 0b       	sbc	r19, r19
    1c6c:	20 bd       	out	0x20, r18	; 32
		
		/*2 - Enable UART Sender & Receiver*/
		SET_BIT(UCSRB,TXEN);
    1c6e:	53 9a       	sbi	0x0a, 3	; 10
		SET_BIT(UCSRB,RXEN);
    1c70:	54 9a       	sbi	0x0a, 4	; 10

		/*3 - Choose asynchronous or synchronous from UCSRC.*/
		CLR_BIT(UCSRC,UMSEL);
    1c72:	80 b5       	in	r24, 0x20	; 32
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	80 bd       	out	0x20, r24	; 32

		/*4 - Choose number of data bits to be sent from UCSRC We will work with 8 bits.*/
		SET_BIT(UCSRC,UCSZ0);
    1c78:	80 b5       	in	r24, 0x20	; 32
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
    1c7e:	80 b5       	in	r24, 0x20	; 32
    1c80:	84 60       	ori	r24, 0x04	; 4
    1c82:	80 bd       	out	0x20, r24	; 32
		CLR_BIT(UCSRC,UCSZ2);
    1c84:	80 b5       	in	r24, 0x20	; 32
    1c86:	8b 7f       	andi	r24, 0xFB	; 251
    1c88:	80 bd       	out	0x20, r24	; 32
	
		sei(); /*enable Interrupt */
    1c8a:	78 94       	sei
	
		SET_BIT(UCSRB,RXCIE); /*enable Interrupt receiving  */
    1c8c:	57 9a       	sbi	0x0a, 7	; 10
	
		SET_BIT(UCSRB,TXCIE); /*enable Interrupt transmit  */
    1c8e:	56 9a       	sbi	0x0a, 6	; 10


}
    1c90:	08 95       	ret

00001c92 <UART_vSendData>:


	void UART_vSendData(char data)
{	
		/*Put data to transmit buffer*/
		UDR = data;
    1c92:	8c b9       	out	0x0c, r24	; 12

		/*Wait for Transmit buffer to be empty*/
		while(!(READ_BIT_SET(UCSRA,TXC)))
    1c94:	5e 9b       	sbis	0x0b, 6	; 11
    1c96:	fe cf       	rjmp	.-4      	; 0x1c94 <UART_vSendData+0x2>
		{
			/*wait until transmit done*/
		}
}
    1c98:	08 95       	ret

00001c9a <UART_u8ReceiveData>:


	char UART_u8ReceiveData()
{
		while(!(READ_BIT_SET(UCSRA,RXC)))
    1c9a:	5f 9b       	sbis	0x0b, 7	; 11
    1c9c:	fe cf       	rjmp	.-4      	; 0x1c9a <UART_u8ReceiveData>
		{
			/*Wait for receive buffer to be filled with data*/
		}
	
		/*Receive data from Data Buffer*/
		return UDR;
    1c9e:	8c b1       	in	r24, 0x0c	; 12
    1ca0:	08 95       	ret

00001ca2 <__cmpsf2>:
    1ca2:	6c d0       	rcall	.+216    	; 0x1d7c <__fp_cmp>
    1ca4:	08 f4       	brcc	.+2      	; 0x1ca8 <__cmpsf2+0x6>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	08 95       	ret

00001caa <__fixunssfsi>:
    1caa:	94 d0       	rcall	.+296    	; 0x1dd4 <__fp_splitA>
    1cac:	88 f0       	brcs	.+34     	; 0x1cd0 <__fixunssfsi+0x26>
    1cae:	9f 57       	subi	r25, 0x7F	; 127
    1cb0:	90 f0       	brcs	.+36     	; 0x1cd6 <__fixunssfsi+0x2c>
    1cb2:	b9 2f       	mov	r27, r25
    1cb4:	99 27       	eor	r25, r25
    1cb6:	b7 51       	subi	r27, 0x17	; 23
    1cb8:	a0 f0       	brcs	.+40     	; 0x1ce2 <__fixunssfsi+0x38>
    1cba:	d1 f0       	breq	.+52     	; 0x1cf0 <__fixunssfsi+0x46>
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	1a f0       	brmi	.+6      	; 0x1ccc <__fixunssfsi+0x22>
    1cc6:	ba 95       	dec	r27
    1cc8:	c9 f7       	brne	.-14     	; 0x1cbc <__fixunssfsi+0x12>
    1cca:	12 c0       	rjmp	.+36     	; 0x1cf0 <__fixunssfsi+0x46>
    1ccc:	b1 30       	cpi	r27, 0x01	; 1
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <__fixunssfsi+0x46>
    1cd0:	9b d0       	rcall	.+310    	; 0x1e08 <__fp_zero>
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	08 95       	ret
    1cd6:	98 c0       	rjmp	.+304    	; 0x1e08 <__fp_zero>
    1cd8:	67 2f       	mov	r22, r23
    1cda:	78 2f       	mov	r23, r24
    1cdc:	88 27       	eor	r24, r24
    1cde:	b8 5f       	subi	r27, 0xF8	; 248
    1ce0:	39 f0       	breq	.+14     	; 0x1cf0 <__fixunssfsi+0x46>
    1ce2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ce4:	cc f3       	brlt	.-14     	; 0x1cd8 <__fixunssfsi+0x2e>
    1ce6:	86 95       	lsr	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	b3 95       	inc	r27
    1cee:	d9 f7       	brne	.-10     	; 0x1ce6 <__fixunssfsi+0x3c>
    1cf0:	3e f4       	brtc	.+14     	; 0x1d00 <__fixunssfsi+0x56>
    1cf2:	90 95       	com	r25
    1cf4:	80 95       	com	r24
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__floatunsisf>:
    1d02:	e8 94       	clt
    1d04:	09 c0       	rjmp	.+18     	; 0x1d18 <__floatsisf+0x12>

00001d06 <__floatsisf>:
    1d06:	97 fb       	bst	r25, 7
    1d08:	3e f4       	brtc	.+14     	; 0x1d18 <__floatsisf+0x12>
    1d0a:	90 95       	com	r25
    1d0c:	80 95       	com	r24
    1d0e:	70 95       	com	r23
    1d10:	61 95       	neg	r22
    1d12:	7f 4f       	sbci	r23, 0xFF	; 255
    1d14:	8f 4f       	sbci	r24, 0xFF	; 255
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	99 23       	and	r25, r25
    1d1a:	a9 f0       	breq	.+42     	; 0x1d46 <__floatsisf+0x40>
    1d1c:	f9 2f       	mov	r31, r25
    1d1e:	96 e9       	ldi	r25, 0x96	; 150
    1d20:	bb 27       	eor	r27, r27
    1d22:	93 95       	inc	r25
    1d24:	f6 95       	lsr	r31
    1d26:	87 95       	ror	r24
    1d28:	77 95       	ror	r23
    1d2a:	67 95       	ror	r22
    1d2c:	b7 95       	ror	r27
    1d2e:	f1 11       	cpse	r31, r1
    1d30:	f8 cf       	rjmp	.-16     	; 0x1d22 <__floatsisf+0x1c>
    1d32:	fa f4       	brpl	.+62     	; 0x1d72 <__floatsisf+0x6c>
    1d34:	bb 0f       	add	r27, r27
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <__floatsisf+0x36>
    1d38:	60 ff       	sbrs	r22, 0
    1d3a:	1b c0       	rjmp	.+54     	; 0x1d72 <__floatsisf+0x6c>
    1d3c:	6f 5f       	subi	r22, 0xFF	; 255
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	8f 4f       	sbci	r24, 0xFF	; 255
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	16 c0       	rjmp	.+44     	; 0x1d72 <__floatsisf+0x6c>
    1d46:	88 23       	and	r24, r24
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <__floatsisf+0x48>
    1d4a:	96 e9       	ldi	r25, 0x96	; 150
    1d4c:	11 c0       	rjmp	.+34     	; 0x1d70 <__floatsisf+0x6a>
    1d4e:	77 23       	and	r23, r23
    1d50:	21 f0       	breq	.+8      	; 0x1d5a <__floatsisf+0x54>
    1d52:	9e e8       	ldi	r25, 0x8E	; 142
    1d54:	87 2f       	mov	r24, r23
    1d56:	76 2f       	mov	r23, r22
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <__floatsisf+0x5e>
    1d5a:	66 23       	and	r22, r22
    1d5c:	71 f0       	breq	.+28     	; 0x1d7a <__floatsisf+0x74>
    1d5e:	96 e8       	ldi	r25, 0x86	; 134
    1d60:	86 2f       	mov	r24, r22
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	2a f0       	brmi	.+10     	; 0x1d72 <__floatsisf+0x6c>
    1d68:	9a 95       	dec	r25
    1d6a:	66 0f       	add	r22, r22
    1d6c:	77 1f       	adc	r23, r23
    1d6e:	88 1f       	adc	r24, r24
    1d70:	da f7       	brpl	.-10     	; 0x1d68 <__floatsisf+0x62>
    1d72:	88 0f       	add	r24, r24
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	97 f9       	bld	r25, 7
    1d7a:	08 95       	ret

00001d7c <__fp_cmp>:
    1d7c:	99 0f       	add	r25, r25
    1d7e:	00 08       	sbc	r0, r0
    1d80:	55 0f       	add	r21, r21
    1d82:	aa 0b       	sbc	r26, r26
    1d84:	e0 e8       	ldi	r30, 0x80	; 128
    1d86:	fe ef       	ldi	r31, 0xFE	; 254
    1d88:	16 16       	cp	r1, r22
    1d8a:	17 06       	cpc	r1, r23
    1d8c:	e8 07       	cpc	r30, r24
    1d8e:	f9 07       	cpc	r31, r25
    1d90:	c0 f0       	brcs	.+48     	; 0x1dc2 <__fp_cmp+0x46>
    1d92:	12 16       	cp	r1, r18
    1d94:	13 06       	cpc	r1, r19
    1d96:	e4 07       	cpc	r30, r20
    1d98:	f5 07       	cpc	r31, r21
    1d9a:	98 f0       	brcs	.+38     	; 0x1dc2 <__fp_cmp+0x46>
    1d9c:	62 1b       	sub	r22, r18
    1d9e:	73 0b       	sbc	r23, r19
    1da0:	84 0b       	sbc	r24, r20
    1da2:	95 0b       	sbc	r25, r21
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <__fp_cmp+0x38>
    1da6:	0a 26       	eor	r0, r26
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <__fp_cmp+0x46>
    1daa:	23 2b       	or	r18, r19
    1dac:	24 2b       	or	r18, r20
    1dae:	25 2b       	or	r18, r21
    1db0:	21 f4       	brne	.+8      	; 0x1dba <__fp_cmp+0x3e>
    1db2:	08 95       	ret
    1db4:	0a 26       	eor	r0, r26
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__fp_cmp+0x3e>
    1db8:	a1 40       	sbci	r26, 0x01	; 1
    1dba:	a6 95       	lsr	r26
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	81 1d       	adc	r24, r1
    1dc0:	81 1d       	adc	r24, r1
    1dc2:	08 95       	ret

00001dc4 <__fp_split3>:
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	90 58       	subi	r25, 0x80	; 128
    1dc8:	44 0f       	add	r20, r20
    1dca:	55 1f       	adc	r21, r21
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <__fp_splitA+0x10>
    1dce:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <__fp_splitA+0x1a>
    1dd2:	47 95       	ror	r20

00001dd4 <__fp_splitA>:
    1dd4:	88 0f       	add	r24, r24
    1dd6:	97 fb       	bst	r25, 7
    1dd8:	99 1f       	adc	r25, r25
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <__fp_splitA+0x20>
    1ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <__fp_splitA+0x2a>
    1de0:	87 95       	ror	r24
    1de2:	08 95       	ret
    1de4:	12 16       	cp	r1, r18
    1de6:	13 06       	cpc	r1, r19
    1de8:	14 06       	cpc	r1, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	f2 cf       	rjmp	.-28     	; 0x1dd2 <__fp_split3+0xe>
    1dee:	46 95       	lsr	r20
    1df0:	f1 df       	rcall	.-30     	; 0x1dd4 <__fp_splitA>
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <__fp_splitA+0x30>
    1df4:	16 16       	cp	r1, r22
    1df6:	17 06       	cpc	r1, r23
    1df8:	18 06       	cpc	r1, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	f1 cf       	rjmp	.-30     	; 0x1de0 <__fp_splitA+0xc>
    1dfe:	86 95       	lsr	r24
    1e00:	71 05       	cpc	r23, r1
    1e02:	61 05       	cpc	r22, r1
    1e04:	08 94       	sec
    1e06:	08 95       	ret

00001e08 <__fp_zero>:
    1e08:	e8 94       	clt

00001e0a <__fp_szero>:
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	66 27       	eor	r22, r22
    1e0e:	77 27       	eor	r23, r23
    1e10:	cb 01       	movw	r24, r22
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__mulsf3>:
    1e16:	0b d0       	rcall	.+22     	; 0x1e2e <__mulsf3x>
    1e18:	78 c0       	rjmp	.+240    	; 0x1f0a <__fp_round>
    1e1a:	69 d0       	rcall	.+210    	; 0x1eee <__fp_pscA>
    1e1c:	28 f0       	brcs	.+10     	; 0x1e28 <__mulsf3+0x12>
    1e1e:	6e d0       	rcall	.+220    	; 0x1efc <__fp_pscB>
    1e20:	18 f0       	brcs	.+6      	; 0x1e28 <__mulsf3+0x12>
    1e22:	95 23       	and	r25, r21
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <__mulsf3+0x12>
    1e26:	5a c0       	rjmp	.+180    	; 0x1edc <__fp_inf>
    1e28:	5f c0       	rjmp	.+190    	; 0x1ee8 <__fp_nan>
    1e2a:	11 24       	eor	r1, r1
    1e2c:	ee cf       	rjmp	.-36     	; 0x1e0a <__fp_szero>

00001e2e <__mulsf3x>:
    1e2e:	ca df       	rcall	.-108    	; 0x1dc4 <__fp_split3>
    1e30:	a0 f3       	brcs	.-24     	; 0x1e1a <__mulsf3+0x4>

00001e32 <__mulsf3_pse>:
    1e32:	95 9f       	mul	r25, r21
    1e34:	d1 f3       	breq	.-12     	; 0x1e2a <__mulsf3+0x14>
    1e36:	95 0f       	add	r25, r21
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	55 1f       	adc	r21, r21
    1e3c:	62 9f       	mul	r22, r18
    1e3e:	f0 01       	movw	r30, r0
    1e40:	72 9f       	mul	r23, r18
    1e42:	bb 27       	eor	r27, r27
    1e44:	f0 0d       	add	r31, r0
    1e46:	b1 1d       	adc	r27, r1
    1e48:	63 9f       	mul	r22, r19
    1e4a:	aa 27       	eor	r26, r26
    1e4c:	f0 0d       	add	r31, r0
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	aa 1f       	adc	r26, r26
    1e52:	64 9f       	mul	r22, r20
    1e54:	66 27       	eor	r22, r22
    1e56:	b0 0d       	add	r27, r0
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	82 9f       	mul	r24, r18
    1e5e:	22 27       	eor	r18, r18
    1e60:	b0 0d       	add	r27, r0
    1e62:	a1 1d       	adc	r26, r1
    1e64:	62 1f       	adc	r22, r18
    1e66:	73 9f       	mul	r23, r19
    1e68:	b0 0d       	add	r27, r0
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	62 1f       	adc	r22, r18
    1e6e:	83 9f       	mul	r24, r19
    1e70:	a0 0d       	add	r26, r0
    1e72:	61 1d       	adc	r22, r1
    1e74:	22 1f       	adc	r18, r18
    1e76:	74 9f       	mul	r23, r20
    1e78:	33 27       	eor	r19, r19
    1e7a:	a0 0d       	add	r26, r0
    1e7c:	61 1d       	adc	r22, r1
    1e7e:	23 1f       	adc	r18, r19
    1e80:	84 9f       	mul	r24, r20
    1e82:	60 0d       	add	r22, r0
    1e84:	21 1d       	adc	r18, r1
    1e86:	82 2f       	mov	r24, r18
    1e88:	76 2f       	mov	r23, r22
    1e8a:	6a 2f       	mov	r22, r26
    1e8c:	11 24       	eor	r1, r1
    1e8e:	9f 57       	subi	r25, 0x7F	; 127
    1e90:	50 40       	sbci	r21, 0x00	; 0
    1e92:	8a f0       	brmi	.+34     	; 0x1eb6 <__mulsf3_pse+0x84>
    1e94:	e1 f0       	breq	.+56     	; 0x1ece <__mulsf3_pse+0x9c>
    1e96:	88 23       	and	r24, r24
    1e98:	4a f0       	brmi	.+18     	; 0x1eac <__mulsf3_pse+0x7a>
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	66 1f       	adc	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	91 50       	subi	r25, 0x01	; 1
    1ea8:	50 40       	sbci	r21, 0x00	; 0
    1eaa:	a9 f7       	brne	.-22     	; 0x1e96 <__mulsf3_pse+0x64>
    1eac:	9e 3f       	cpi	r25, 0xFE	; 254
    1eae:	51 05       	cpc	r21, r1
    1eb0:	70 f0       	brcs	.+28     	; 0x1ece <__mulsf3_pse+0x9c>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <__fp_inf>
    1eb4:	aa cf       	rjmp	.-172    	; 0x1e0a <__fp_szero>
    1eb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb8:	ec f3       	brlt	.-6      	; 0x1eb4 <__mulsf3_pse+0x82>
    1eba:	98 3e       	cpi	r25, 0xE8	; 232
    1ebc:	dc f3       	brlt	.-10     	; 0x1eb4 <__mulsf3_pse+0x82>
    1ebe:	86 95       	lsr	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	b7 95       	ror	r27
    1ec6:	f7 95       	ror	r31
    1ec8:	e7 95       	ror	r30
    1eca:	9f 5f       	subi	r25, 0xFF	; 255
    1ecc:	c1 f7       	brne	.-16     	; 0x1ebe <__mulsf3_pse+0x8c>
    1ece:	fe 2b       	or	r31, r30
    1ed0:	88 0f       	add	r24, r24
    1ed2:	91 1d       	adc	r25, r1
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <__fp_inf>:
    1edc:	97 f9       	bld	r25, 7
    1ede:	9f 67       	ori	r25, 0x7F	; 127
    1ee0:	80 e8       	ldi	r24, 0x80	; 128
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	08 95       	ret

00001ee8 <__fp_nan>:
    1ee8:	9f ef       	ldi	r25, 0xFF	; 255
    1eea:	80 ec       	ldi	r24, 0xC0	; 192
    1eec:	08 95       	ret

00001eee <__fp_pscA>:
    1eee:	00 24       	eor	r0, r0
    1ef0:	0a 94       	dec	r0
    1ef2:	16 16       	cp	r1, r22
    1ef4:	17 06       	cpc	r1, r23
    1ef6:	18 06       	cpc	r1, r24
    1ef8:	09 06       	cpc	r0, r25
    1efa:	08 95       	ret

00001efc <__fp_pscB>:
    1efc:	00 24       	eor	r0, r0
    1efe:	0a 94       	dec	r0
    1f00:	12 16       	cp	r1, r18
    1f02:	13 06       	cpc	r1, r19
    1f04:	14 06       	cpc	r1, r20
    1f06:	05 06       	cpc	r0, r21
    1f08:	08 95       	ret

00001f0a <__fp_round>:
    1f0a:	09 2e       	mov	r0, r25
    1f0c:	03 94       	inc	r0
    1f0e:	00 0c       	add	r0, r0
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__fp_round+0xc>
    1f12:	88 23       	and	r24, r24
    1f14:	52 f0       	brmi	.+20     	; 0x1f2a <__fp_round+0x20>
    1f16:	bb 0f       	add	r27, r27
    1f18:	40 f4       	brcc	.+16     	; 0x1f2a <__fp_round+0x20>
    1f1a:	bf 2b       	or	r27, r31
    1f1c:	11 f4       	brne	.+4      	; 0x1f22 <__fp_round+0x18>
    1f1e:	60 ff       	sbrs	r22, 0
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <__fp_round+0x20>
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	08 95       	ret

00001f2c <__udivmodsi4>:
    1f2c:	a1 e2       	ldi	r26, 0x21	; 33
    1f2e:	1a 2e       	mov	r1, r26
    1f30:	aa 1b       	sub	r26, r26
    1f32:	bb 1b       	sub	r27, r27
    1f34:	fd 01       	movw	r30, r26
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <__udivmodsi4_ep>

00001f38 <__udivmodsi4_loop>:
    1f38:	aa 1f       	adc	r26, r26
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	ee 1f       	adc	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	a2 17       	cp	r26, r18
    1f42:	b3 07       	cpc	r27, r19
    1f44:	e4 07       	cpc	r30, r20
    1f46:	f5 07       	cpc	r31, r21
    1f48:	20 f0       	brcs	.+8      	; 0x1f52 <__udivmodsi4_ep>
    1f4a:	a2 1b       	sub	r26, r18
    1f4c:	b3 0b       	sbc	r27, r19
    1f4e:	e4 0b       	sbc	r30, r20
    1f50:	f5 0b       	sbc	r31, r21

00001f52 <__udivmodsi4_ep>:
    1f52:	66 1f       	adc	r22, r22
    1f54:	77 1f       	adc	r23, r23
    1f56:	88 1f       	adc	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	1a 94       	dec	r1
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <__udivmodsi4_loop>
    1f5e:	60 95       	com	r22
    1f60:	70 95       	com	r23
    1f62:	80 95       	com	r24
    1f64:	90 95       	com	r25
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	bd 01       	movw	r22, r26
    1f6c:	cf 01       	movw	r24, r30
    1f6e:	08 95       	ret

00001f70 <_exit>:
    1f70:	f8 94       	cli

00001f72 <__stop_program>:
    1f72:	ff cf       	rjmp	.-2      	; 0x1f72 <__stop_program>
